extern "C" %{
/*
 *  Copyright (c) 2010-2012
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"

#if defined(HAVE_CUDA)
#include "gpu_data.h"
#include "dplasma/cores/cuda_zgemm.h"
extern int *gpu_counter;
extern dague_gpu_data_map_t dague_gpu_map;
#endif  /* defined(HAVE_CUDA) */
%}

/* Globals
 */
PRI_CHANGE [type = int hidden = on]
uplo       [type = PLASMA_enum]
descA      [type = "tiled_matrix_desc_t"]
A          [type = "dague_ddesc_t *"]
INFO       [type = "int*"]

/**************************************************
 *                      POTRF                     *
 **************************************************/
POTRF(k) [high_priority = on]

// Execution space
k = 0..descA.mt-1

// Parallel partitioning
:A(k, k)

// Parameters
RW T <- (k == 0) ? A(k, k) : T HERK(k-1, k)
     -> T TRSM(k+1..descA.mt-1, k)
     -> A(k, k)

; (k >= (descA.mt - PRI_CHANGE)) ? (descA.mt - k) * (descA.mt - k) * (descA.mt - k) : 1000000000
//; (k >= (descA.mt - PRI_CHANGE)) ? (descA.mt - k + 7) * (descA.mt - k + 2) * (descA.mt - k) / 6 : 0

BODY
#if defined(HAVE_CUDA)
    dague_gpu_update_data_version( &dague_gpu_map, GEMM_KEY( &descA, k, k) );
#endif  /* defined(HAVE_CUDA) */

    int tempkm = k == descA.mt-1 ? descA.m - k*descA.mb : descA.mb;
    int ldak = BLKLDD( descA, k );

    DRYRUN(
        int iinfo = 0;
        CORE_zpotrf(
            uplo, tempkm, T, ldak,
            &iinfo );
        if ( iinfo != 0 && *INFO == 0 )
            *INFO = k*descA.mb+iinfo; /* Should return here */
         );

    printlog(
             "CORE_zpotrf( %d )\n\t( %s, %d, A(%d,%d)[%p], %d)\n",
             k,
             plasma_const(uplo), tempkm, k, k, T, descA.mb );
END


/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM(m, k) [high_priority = on]

// Execution space
m = 1..descA.mt-1
k = 0..m-1

// Parallel partitioning
: A(m, k)

// Parameters
READ  T <- T POTRF(k)
RW    C <- (k == 0) ? A(m, k) : C GEMM(k-1, m, k)
        -> A HERK(k, m)
        -> A GEMM(k, m, k+1..m-1 )
        -> B GEMM(k, m+1..descA.mt-1, m )
        -> A(m, k)

; (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m) * (descA.mt - m) * (descA.mt - m) + 3 * ((2 * descA.mt) - k - m - 1) * (m - k) : 1000000000
//;  (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m - k) * ((descA.mt - m - k + 1) / 2 + 2) - 1 + (descA.mt - m + 2) * (descA.mt - m + 1) * (descA.mt - m) / 6 : 0

BODY
#if defined(HAVE_CUDA)
    dague_gpu_update_data_version( &dague_gpu_map, GEMM_KEY( &descA, m, k) );
#endif  /* defined(HAVE_CUDA) */

    int tempmm = m == descA.mt-1 ? descA.m - m * descA.mb : descA.mb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );
    DRYRUN(
        CORE_ztrsm(
            PlasmaRight, PlasmaLower, PlasmaConjTrans, PlasmaNonUnit,
            tempmm, descA.nb,
            (Dague_Complex64_t)1.0, T /*A(k, k)*/, ldak,
                                    C /*A(m, k)*/, ldam);
        );

    printlog("CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
             m, k,
             plasma_const( PlasmaRight ), plasma_const( PlasmaLower ),
             plasma_const( PlasmaConjTrans ), plasma_const( PlasmaNonUnit ),
             tempmm, descA.nb,
             1.0, k, k, T, ldak,
                  m, k, C, ldam);

END


/**************************************************
 *                      HERK                      *
 **************************************************/
HERK(k, m) [high_priority = on]

// Execution space
k = 0..descA.mt-2
m = k+1..descA.mt-1

// Parallel partitioning
: A(m, m)

//Parameters
READ  A <- C TRSM(m, k)
RW    T <- (k == 0)   ? A(m, m)    : T HERK(k-1, m)
        -> (m == k+1) ? T POTRF(m) : T HERK(k+1, m)

; (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m) * (descA.mt - m) * (descA.mt - m) + 3 * (m - k) : 1000000000
//; (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m + 2) * (descA.mt - m + 1) * (descA.mt - m) / 6 + descA.mt - m + k + 1 : 0

BODY
#if defined(HAVE_CUDA)
    dague_gpu_update_data_version( &dague_gpu_map, GEMM_KEY( &descA, m, m) );
#endif  /* defined(HAVE_CUDA) */

    int tempmm = m == descA.mt-1 ? descA.m - m*descA.mb : descA.mb;
    int ldam = BLKLDD( descA, m );

    DRYRUN(
        CORE_zherk(
            PlasmaLower, PlasmaNoTrans,
            tempmm, descA.mb,
            (double)-1.0, A /*A(m, k)*/, ldam,
            (double) 1.0, T /*A(m, m)*/, ldam);
        );
    printlog(
             "CORE_zherk( %d, %d )\n\t( %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             k, m,
             plasma_const( PlasmaLower ), plasma_const( PlasmaNoTrans ),
             tempmm, descA.mb,
             -1.0, m, k, A, ldam,
              1.0, m, m, T, ldam);
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(k, m, n)

// Execution space
k = 0   .. descA.mt-3
m = k+2 .. descA.mt-1
n = k+1 .. m-1

// Parallel partitioning
: A(m, n)

// Parameters
READ  A <- C TRSM(m, k)
READ  B <- C TRSM(n, k)
RW    C <- (k == 0)   ? A(m, n)      : C GEMM(k-1, m, n)
        -> (n == k+1) ? C TRSM(m, n) : C GEMM(k+1, m, n)

; (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m) * (descA.mt - m) * (descA.mt - m) + 3 * ((2 * descA.mt) - m - n - 3) * (m - n) + 6 * (m - k) : 1000000000
//;  (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m - n) * ((descA.mt - n - k + 1) / 2 + 2) - 1 + (descA.mt - m + 2) * (descA.mt - m + 1) * (descA.mt - m) / 6 + descA.mt - n + k + 1 : 0

BODY
    int tempmm = m == descA.mt-1 ? descA.m - m * descA.mb : descA.mb;
    int ldam = BLKLDD( descA, m );
    int ldan = BLKLDD( descA, n );

#if defined(HAVE_CUDA)
    if( dague_active_gpu() > 0 ) {
        int rc;

        if( 0 == (rc = gpu_zgemm( context, this_task, 
                                  ( n == k+1 ),
                                  PlasmaNoTrans, PlasmaConjTrans,
                                  tempmm, descA.mb, descA.mb,
                                  (Dague_Complex64_t)-1.0, m, k, &descA, ldam,
                                                           n, k, &descA, ldan,
                                  (Dague_Complex64_t) 1.0, m, n, &descA, ldam)) )
            goto FIN;
        if( -1 == rc ) {
            /* The task is pending in the device, and will be subsequently completed */
            return -1;
        }
        if( -2 == rc ) {
            /* The GPU failed to execute this task, but the task was already rescheduled */
	    fprintf(stderr, "Unable to disable GPU at runtime. Fatal error.\n");
	    exit(2);
        }
    }
    dague_gpu_update_data_version( &dague_gpu_map, GEMM_KEY( &descA, m, n) );
#endif  /* defined(HAVE_CUDA) */

    DRYRUN(
        CORE_zgemm(
            PlasmaNoTrans, PlasmaConjTrans,
            tempmm, descA.mb, descA.mb,
            (Dague_Complex64_t)-1.0, A /*A(m, k)*/, ldam,
                                     B /*A(n, k)*/, ldan,
            (Dague_Complex64_t) 1.0, C /*A(m, n)*/, ldam);
        );
    printlog("CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             k, m, n,
             plasma_const( PlasmaNoTrans ),  plasma_const( PlasmaConjTrans ),
             tempmm, descA.mb, descA.mb,
             -1.0, m, k, A, ldam,
                   n, k, B, ldan,
              1.0, m, n, C, ldam);

#if defined(HAVE_CUDA)
FIN:
#endif  /* defined(HAVE_CUDA) */

END
