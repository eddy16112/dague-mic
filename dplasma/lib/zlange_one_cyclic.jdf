extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 *
 * This jdf returns the value of the one norm of a matrix A
 * where the one norm  of a matrix is the maximum column sum.
 *
 * This jdf is optimized for 2D-Block cyclic distributed data with a grid
 * P-by-Q.
 * The first step sums the local data of each columns.
 * The second finishes the sums on each columns. At the end of this step, all P
 * processes belonging to a column have the same data.
 * The third step search the local maximum.
 * The fourth step combines the local maxima together. At the end all processes
 * owns the same value.
 *
 * The reductions are down by a pipeline folowed by a broadcast of the results.
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>
#include <math.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"
#include "dplasma/cores/dplasma_zcores.h"

%}

/* Globals
 */
P            [type = "int"]
Q            [type = "int"]
A            [type = "dague_ddesc_t *"]
Wcol         [type = "dague_ddesc_t *"]
Welt         [type = "dague_ddesc_t *"]
norm         [type = "double *"]

descA        [type = "tiled_matrix_desc_t" hidden=on default="*((tiled_matrix_desc_t*)A)" ]

RWCOL(m, n) [profile = off]

    // Execution space
    m = 0 .. P-1
    n = 0 .. descA.nt-1
    row = inline_c %{
    	return descA.mt-((descA.mt-m-1)%P)-1;
        %}

    // Parallel partitioning
    :Wcol(m, n)

    // Parameters
    READ W <- Wcol(m, n)
           -> (m <  descA.mt   ) ? W STEP1(row, n)  [type = COL]
           -> (m > (descA.mt-1)) ? W STEP2(m,   n)  [type = COL]

BODY
    DRYRUN(
        /* Initialize W */
        int i;
        for(i = 0; i < descA.nb; i++)
            ((double *)W)[i] = 0;
           );
END

RWELT(m, n) [profile = off]

    // Execution space
    m = 0 .. P-1
    n = 0 .. Q-1
    col = inline_c %{
    	return descA.nt-((descA.nt-n-1)%Q)-1;
        %}

    // Parallel partitioning
    :Welt(m, n)

    // Parameters
    READ W <- Welt(m, n)
           -> (n <  descA.nt   ) ? W STEP3(m, col)  [type = ELT]
           -> (n > (descA.nt-1)) ? W STEP4(m,   n)  [type = ELT]

BODY
    DRYRUN(
        /* Initialize W */
        ((double *)W)[0] = 0.;
           );
END

/**************************************************
 *
 *                    STEP 1
 *
 *  For j in [1,Q], W(m, j) = reduce( A(m, j+k*Q) )
 *
 **************************************************/
STEP1(m,n)

    // Execution space
    m = 0 .. descA.mt-1
    n = 0 .. descA.nt-1

    // Parallel partitioning
    :A(m, n)

    // Parameters
    READ A <-  A(m, n)
    RW   W <-  ( m < (descA.mt-P)) ? W STEP1( m+P, n ) : W RWCOL( m%P, n ) [type = COL]
           ->  ( m < P           ) ? W STEP2( m, n   ) : W STEP1( m-P, n ) [type = COL]

BODY

    int tempmm = ( m == (descA.mt-1) ) ? descA.m - m * descA.mb : descA.mb;
    int tempnn = ( n == (descA.nt-1) ) ? descA.n - n * descA.nb : descA.nb;
    int ldam = BLKLDD( descA, m );

    printlog("thread %d zlange STEP1(%d, %d)\n"
             "\t( tempmm=%d, tempnn=%d, A(%d, %d)[%p], lda=%d, W(%d,%d)[%p])\n",
             context->th_id, m, n, tempmm, tempnn, m, n, A, ldam, m, n%Q, W);

    DRYRUN(

        CORE_dzasum(PlasmaColumnwise, PlasmaUpperLower,
                    tempmm, tempnn,
                    A, ldam, W);
           );

END

/**************************************************
 *                    STEP 2
 *
 *  For each j, W(m, j) = reduce( W(m, 0..Q-1) )
 *
 **************************************************/
STEP2(m, n)

    // Execution space
    m = 0 .. P-1
    n = 0 .. descA.nt-1

    // Parallel partitioning
    :Wcol(m, n)

    // Parameters
    READ A <- ( m == 0 ) ? Wcol(m, n) : W STEP2(m-1, n)                   [type = COL]
    RW   W <- ( m >  (descA.mt-1)) ? W RWCOL(m, n )     : W STEP1(m,   n) [type = COL]
           -> ( m == (P-1)       ) ? A STEP3(0..P-1, n) : A STEP2(m+1, n) [type = COL]

BODY

    int tempnn = ( n == (descA.nt-1) ) ? descA.n - n * descA.nb : descA.nb;

    printlog("thread %d zlange STEP2(%d, %d)\n"
             "\t( tempnn=%d, W(%d, %d) + W(%d, %d)\n",
             context->th_id, m, n, tempnn, m-1, n, m, n);

    DRYRUN(
        if(m > 0)
        {
            cblas_daxpy( tempnn, 1., A, 1, W, 1);
        }
           );

END


/**************************************************
 *
 *                    STEP3
 *
 * For m in 0..P-1, W(m, n) = max( W(m..mt[P], n ) )
 *
 **************************************************/
STEP3(m, n)

    // Execution space
    m = 0 .. P-1
    n = 0 .. descA.nt-1

    // Parallel partitioning
    :Wcol(m, n)

    // Parameters
    READ A <- W STEP2(P-1, n)                                            [type = COL]
    RW   W <- (n < (descA.nt-Q)) ? W STEP3( m, n+Q ) : W RWELT( m, n%Q ) [type = ELT]
           -> (n < Q           ) ? W STEP4( m, n   ) : W STEP3( m, n-Q ) [type = ELT]

BODY

    int tempnn = ( n == (descA.nt-1) ) ? descA.n - n * descA.nb : descA.nb;

    printlog("thread %d zlange STEP3(%d, %d)\n",
             context->th_id, m, n);

    DRYRUN(
        double *dA = (double*)A;
        double *dW = (double*)W;
        double maxval = 0;
        int i;

        for(i = 0; i < tempnn; i++, dA++)
            maxval = ( maxval > *dA ) ? maxval : *dA;

        if ( n < (descA.nt-Q) ) {
            *dW = ( maxval > *dW ) ? maxval : *dW;
        } else {
            *dW = maxval;
        }
           );

END

/**************************************************
 *                    STEP 4
 *
 *  For each i, W(i, n) = max( W(0..P-1, n) )
 *
 **************************************************/
STEP4(m,n)

    // Execution space
    m = 0..P-1
    n = 0..Q-1

    // Parallel partitioning
    :Welt(m, n)

    // Parameters
    READ A <- ( n == 0 ) ? Welt(m, n) : W STEP4(m, n-1)                       [type = ELT]
    RW   W <- ( n >  (descA.nt-1)) ? W RWELT( m, n)         : W STEP3(m, n  ) [type = ELT]
           -> ( n == (Q-1)       ) ? W WRITE_RES(m, 0..Q-1) : A STEP4(m, n+1) [type = ELT]

BODY

    printlog("thread %d zlange STEP4(%d, %d)\n",
             context->th_id, m, n);

    DRYRUN(
        double *dA = (double*)A;
        double *dW = (double*)W;
        if(n > 0)
            *dW = ( *dA > *dW ) ? *dA : *dW;
           );

END

/**************************************************
 *                      STEP5                     *
 **************************************************/
WRITE_RES(m,n)

    // Execution space
    m = 0..P-1
    n = 0..Q-1

    // Parallel partitioning
    :Welt(m, n)

    // Parameters
        READ W <- W STEP4( m, Q-1 )   [type = ELT]

BODY
    *norm = *( (double*)W );
END
