extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> c
   *
   */
#include <plasma.h>
#include <core_blas.h>

#define PRECISION_z
#define BLKLDD(_desc, _k) (_desc).mb

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/dplasmajdf.h"

%}

/*
 * Globals
 */
uplo   [type = PLASMA_enum]
bump   [type = double]
seed   [type = "unsigned long long int" ]
descA  [type = "tiled_matrix_desc_t"]
A      [type = "dague_ddesc_t *"]

plasma_upper   [type="PLASMA_enum" hidden=on default=PlasmaUpper ]
plasma_lower   [type="PLASMA_enum" hidden=on default=PlasmaLower ]

PLGHE_L(m, n)  [profile = off]

// Execution space
m = 1 .. ((uplo == plasma_upper) ? 0 : descA.mt-1)
n = 0 .. ( m < descA.nt ? m-1 : descA.nt-1 )

// Parallel partitioning
: A(m, n)

// Parameters

RW A <- A(m, n)
     -> A(m, n)
BODY
  int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
  int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
  int ldam = BLKLDD( descA, m );

        DRYRUN(
               CORE_zplghe( 
                   bump, tempmm, tempnn, A, ldam,
                   descA.m, m*descA.mb, n*descA.nb, seed );
               );

        printlog("thread %d plghe_l( %d, %d )\n"
                 "    ( %f, %d, %d, A(%d,%d), %d, %d, %d, %d, %llu)\n",
                 context->eu_id, m, n, bump, tempmm, tempnn, 
                 m, n, ldam,
                 descA.m, m*descA.mb, n*descA.nb, seed);
END

PLGHE_U(m, n)  [profile = off]

// Execution space
m = 0   .. descA.mt-1
n = m+1 .. ((uplo == plasma_lower) ? 0 : descA.nt-1)

// Parallel partitioning
: A(m, n)

// Parameters

RW   A <- A(m, n)
       -> A(m, n)
BODY
  int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
  int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
  int ldam = BLKLDD( descA, m );

        DRYRUN(
               CORE_zplghe( 
                   bump, tempmm, tempnn, A, ldam,
                   descA.m, m*descA.mb, n*descA.nb, seed );
               );

        printlog("thread %d plghe_u( %d, %d )\n"
                 "    ( %f, %d, %d, A(%d,%d), %d, %d, %d, %d, %llu)\n",
                 context->eu_id, m, n, bump, tempmm, tempnn, 
                 m, n, ldam,
                 descA.m, m*descA.mb, n*descA.nb, seed);
END

PLGHE_DIAG(k)  [profile = off]

// Execution space
     k = 0 .. ( descA.mt < descA.nt ? descA.mt-1 : descA.nt-1 )

// Parallel partitioning
: A(k, k)

// Parameters

RW   A <- A(k, k)
       -> A(k, k)
BODY
  int tempkm = ((k)==((descA.mt)-1)) ? ((descA.m)-(k*(descA.mb))) : (descA.mb);
  int tempkn = ((k)==((descA.nt)-1)) ? ((descA.n)-(k*(descA.nb))) : (descA.nb);
  int ldak = BLKLDD( descA, k );

        DRYRUN(
               CORE_zplghe( 
                   bump, tempkm, tempkn, A, ldak,
                   descA.m, k*descA.mb, k*descA.nb, seed );
               );

        printlog("thread %d plghe_diag( %d )\n"
                 "    ( %f, %d, %d, A(%d,%d), %d, %d, %d, %d, %llu)\n",
                 context->eu_id, k, bump, tempkm, tempkn, 
                 k, k, ldak,
                 descA.m, k*descA.mb, k*descA.nb, seed);
END
extern "C" %{

%}
