extern "C" %{
/*
 *  Copyright (c) 2010      
 * 
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"


%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
side  [type = "PLASMA_enum"]
uplo  [type = "PLASMA_enum"]
trans [type = "PLASMA_enum"]
diag  [type = "PLASMA_enum"]
alpha [type = "Dague_Complex64_t"]
descA [type = "tiled_matrix_desc_t"]
A     [type = "dague_ddesc_t *"]
descB [type = "tiled_matrix_desc_t"]
B     [type = "dague_ddesc_t *"]

/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM_IN(k)  [profile = off]
k = 0..descB.nt-1

: A(k, k)

READ A <- A(k, k)
       -> A TRSM(0..descB.mt-1, k)

BODY
  /* Nothing */
END

TRSM(m, k)

// Execution space
m = 0..descB.mt-1
k = 0..descB.nt-1

// Parallel partitioning
: B(m, k)

// Parameters
READ  A <- A TRSM_IN(k)
RW    B <- (k == descB.nt-1) ? B(m, k) : C GEMM(k+1, m, k)
        -> B GEMM(k, m, 0..k-1)
        -> B(m, k)

BODY
      Dague_Complex64_t lalpha = k == descB.nt-1 ? alpha : (Dague_Complex64_t)1.0;    
      int tempmm = m == descB.mt-1 ? descB.m - m * descB.mb : descB.mb;
      int tempkn = k == descB.nt-1 ? descB.n - k * descB.nb : descB.nb;
      DRYRUN(
	   CORE_ztrsm(
			side, uplo, trans, diag,
                        tempmm, tempkn, 
			lalpha, A /*A(k, k)*/, descA.mb,
                                B /*B(m, k)*/, descB.mb)
	   );

      printlog("thread %d CORE_ztrsm( %d, %d)\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d)\n",
	       context->eu_id, m, k,
               plasma_const( side ), plasma_const( uplo ), plasma_const( trans ), plasma_const( diag ),
               tempmm, tempkn,
	       creal(lalpha), k, k, A /*A(k, k)*/, descA.mb,
                       m, k, B /*B(m, k)*/, descB.mb);
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
GEMM_IN(k, n)  [profile = off]
k = 0..descB.nt-1
n = 0..k-1

:A(k, n)

READ A <- A(k, n)
       -> A GEMM(k, 0..descB.mt-1, n)

BODY
 /* Nothing */
END

// Name
GEMM(k, m, n)

// Execution space
k = 0..descB.nt-1
m = 0..descB.mt-1
n = 0..k-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  A <- A GEMM_IN(k, n)
READ  B <- B TRSM(m, k)
RW    C <- (k == descB.nt-1) ? B(m, n)      : C GEMM(k+1, m, n)
        -> (k-1 == n)   ? B TRSM(m, n) : C GEMM(k-1, m, n)

BODY
      Dague_Complex64_t lalpha = k == descB.nt-1 ? alpha : (Dague_Complex64_t)1.0;    
      int tempmm = m == descB.mt-1 ? descB.m - m * descB.mb : descB.mb;
      int tempkn = k == descB.nt-1 ? descB.n - k * descB.nb : descB.nb;
      DRYRUN(
	   CORE_zgemm(
			PlasmaNoTrans, trans,
                        tempmm, descB.nb, tempkn,
			(Dague_Complex64_t)-1.0, B /* B(m, k)*/ , descB.mb,
			                         A /* A(k, n)*/ , descA.mb,
			lalpha,                  C /* B(m, n)*/ , descB.mb)
	   );

      printlog("thread %d CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d, %f, B(%d,%d)[%p], %d)\n",
	       context->eu_id, k, m, n,
               plasma_const( PlasmaNoTrans ), plasma_const( trans ), 
               tempmm, descB.nb, tempkn,
	       -1.0, m, k, B, descB.mb,
                                        k, n, A, descA.mb,
	       creal(lalpha),                  m, n, C, descB.mb);
END
