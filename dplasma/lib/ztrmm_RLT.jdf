extern "C" %{
/*
 *  Copyright (c) 2010 - 2011
 * 
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "dplasma/lib/dplasmajdf.h"
%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
side  [type = "PLASMA_enum"]
uplo  [type = "PLASMA_enum"]
trans [type = "PLASMA_enum"]
diag  [type = "PLASMA_enum"]

alpha[type = Dague_Complex64_t]

Am   [type = int]
An   [type = int]
Amb  [type = int]
Anb  [type = int]
Amt  [type = int]
Ant  [type = int]

Bm   [type = int]
Bn   [type = int]
Bmb  [type = int]
Bnb  [type = int]
Bmt  [type = int]
Bnt  [type = int]
     
/**************************************************
 *                      TRMM                      *
 **************************************************/
TRMM_IN(n)  [profile = off]
n = 0..Bnt-1

: A(n, n)

READ A <- A(n, n)
  -> A TRMM(0..Bmt-1, n)

BODY
  /* Nothing */
  printlog("thread %d trmm_in( %d )\n", context->eu_id, n);
END

TRMM(m, n)

// Execution space
m = 0..Bmt-1
n = 0..Bnt-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  A   <- A TRMM_IN(n)
RW    B   <- B(m, n)
          -> (n == 0)     ? B(m, n)   : C GEMM(m, n, n-1)
CTL   ctl <- (n != Bnt-1) ? ctl1 GOK(m, n+1, n)

BODY
     int tempmm = m == Bmt-1 ? Bm - m * Bmb : Bmb;
     int tempnn = n == Bnt-1 ? Bn - n * Bnb : Bnb;
     DRYRUN(
	  CORE_ztrmm(
              side, uplo, trans, diag,
              tempmm, tempnn,
              alpha, A /*A(n, n)*/, Amb,
                     B /*B(m, n)*/, Bmb)
          );

     printlog("thread %d CORE_ztrmm( %d, %d )\n"
              "    ( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d)\n",
              context->eu_id, m, n, 
              plasma_const(side), plasma_const(uplo), plasma_const(trans), plasma_const(diag), 
              tempmm, tempnn,
              creal(alpha), m, m, A, Amb,
                     m, n, B, Bmb);
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
GEMM_INA(n, k)  [profile = off]
n = 0..Bnt-1
k = 0..n-1

:A(n, k)

READ A <- A(n, k)
       -> A GEMM(0..Bmt-1, n, k)

BODY
  /* Nothing */
  printlog("thread %d gemm_inA( %d, %d )\n", context->eu_id, n, k);
END


GEMM_INB(m, k)  [profile = off]
m = 0..Bmt-1
k = 0..Bnt-2

:B(m, k)

READ B <- B(m, k)
       -> B GEMM(m, k+1..Bnt-1, k)

BODY
  /* Nothing */
  printlog("thread %d gemm_inB( %d, %d )\n", context->eu_id, m, k);
END

// Name
GEMM(m, n, k)

// Execution space
m = 0..Bmt-1
n = 1..Bnt-1
k = 0..n-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  B   <- B GEMM_INB(m, k)
READ  A   <- A GEMM_INA(n, k) 
RW    C   <- (k == n-1) ? B TRMM(m, n) : C GEMM(m, n, k+1)
          -> (k == 0)   ? B(m, n)      : C GEMM(m, n, k-1)
CTL   ctl -> ctl2 GOK(m, n, k)
BODY
     int tempmm = m == Bmt-1 ? Bm - m * Bmb : Bmb;
     int tempnn = n == Bnt-1 ? Bn - n * Bnb : Bnb;
     DRYRUN(
            CORE_zgemm(
		  PlasmaNoTrans, trans,
                  tempmm, tempnn, Bmb,
		  alpha, B, Bmb,
		         A, Amb,
		  (Dague_Complex64_t)1.0, C, Bmb)
	   );

      printlog("thread %d gemm( %d, %d, %d )\n"
	       "    ( %s, %s, %d, %d, %d, %f, B(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, B(%d,%d)[%p], %d)\n",
	       context->eu_id, m, n, k, 
               plasma_const( PlasmaNoTrans ), plasma_const( trans ), 
               tempmm, tempnn, Bmb,
	       creal(alpha), m, k, B, Bmb, n, k, A, Amb,
	       (Dague_Complex64_t)1.0, m, n, C, Bmb);
END

/**************************************************
 *                      GOK                       *
 **************************************************/
// Name
GOK(m, n, k)  [profile = off]

// Execution space
m = 0..Bmt-1
n = 1..Bnt-1
k = 0..n-1

// Parallel partitioning
: B(m, n)

// Parameters
CTL   ctl1 <- (n   != Bnt-1) ? ctl1 GOK(m, n+1, k)
           -> (n-1 == k    ) ? ctl TRMM(m, k) : ctl1 GOK(m, n-1, k)
CTL   ctl2 <- ctl GEMM(m, n, k)
BODY
      /* Fake task to guaranty the end of all gemm using B(m, n) before to start TRMM */
     printlog("thread %d gok( %d, %d, %d )\n", context->eu_id, m, n, k);
END
