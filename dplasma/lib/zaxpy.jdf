extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> c d s
   *
   */
#include <lapacke.h>
#include <plasma.h>
#include <core_blas.h>

#define PRECISION_z
#define BLKLDD(_desc, _k) (_desc).mb

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/dplasmajdf.h"

%}

/*
 * Globals
 */
alpha  [type = Dague_Complex64_t ]
descA  [type = "tiled_matrix_desc_t"]
A      [type = "dague_ddesc_t *"]
descB  [type = "tiled_matrix_desc_t"]
B      [type = "dague_ddesc_t *"]

axpy_in_Amn(m, n)
m = 0 .. descA.mt-1
n = 0 .. descA.nt-1
    
  : A(m, n)

  RW A <- A(m, n)
       -> A AXPY(m, n)
BODY
/* nothing */
END

AXPY(m, n)

// Execution space
m = 0 .. descA.mt-1
n = 0 .. descA.nt-1

// Parallel partitioning
: B(m, n)

// Parameters

READ  A <- A axpy_in_Amn(m, n)
RW    B <- B(m, n)
        -> B(m, n)
BODY
  int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
  int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
  int ldam = BLKLDD( descA, m );
  int ldbm = BLKLDD( descB, m );

        DRYRUN(
               CORE_zaxpy( tempmm, tempnn, alpha,
			   A, ldam, B, ldbm);
               );

        printlog("thread %d axpy( %d, %d )\n"
                 "    ( %d, %d, %e, A(%d,%d), %d, B(%d,%d), %d)\n",
                 context->eu_id, m, n, 
		 tempmm, tempnn, creal(alpha),
                 m, n, ldam, m, n, ldbm);
END


extern "C" %{

%}
