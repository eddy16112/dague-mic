extern "C" %{
/*
 *  Copyright (c) 2010      
 * 
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <lapacke.h>
#include <plasma.h>
#include <core_blas.h>


#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/dplasmajdf.h"

%}

/*
 * Globals
 */
uplo   [type = PLASMA_enum]
descA  [type = "tiled_matrix_desc_t"]
A      [type = "dague_ddesc_t *"]
descB  [type = "tiled_matrix_desc_t"]
B      [type = "dague_ddesc_t *"]

plasma_upper   [type="PLASMA_enum" hidden=on default=PlasmaUpper ]
plasma_lower   [type="PLASMA_enum" hidden=on default=PlasmaLower ]


lacpy_l_in_Amn(m, n)  [profile = off]
m = 1 .. ((uplo == plasma_upper) ? 0 : descA.mt-1)
n = 0 .. ( m < descA.nt ? m-1 : descA.nt-1 )
    
  : A(m, n)

  RW A <- A(m, n)
       -> A LACPY_L(m, n)
BODY
/* nothing */
END

LACPY_L(m, n)

// Execution space
m = 1 .. ((uplo == plasma_upper) ? 0 : descA.mt-1)
n = 0 .. ( m < descA.nt ? m-1 : descA.nt-1 )

// Parallel partitioning
: B(m, n)

// Parameters

READ  A <- A lacpy_l_in_Amn(m, n)
RW    B <- B(m, n)
        -> B(m, n)
BODY
  int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
  int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
  int ldam = BLKLDD( descA, m );
  int ldbm = BLKLDD( descB, m );

        DRYRUN(
               LAPACKE_zlacpy_work( 
                   LAPACK_COL_MAJOR, 'A',
                   tempmm, tempnn, 
                   A, ldam, B, ldbm);
               );

        printlog("thread %d lacpy_l( %d, %d )\n"
                 "    ( %s, %d, %d, A(%d,%d), %d, B(%d,%d), %d)\n",
                 context->eu_id, m, n, 
                 plasma_const(uplo), tempmm, tempnn, 
                 m, n, ldam, m, n, ldbm);
END


lacpy_u_in_Amn(m, n)  [profile = off]
m = 0   .. descA.mt-1
n = m+1 .. ((uplo == plasma_lower) ? 0 : descA.nt-1)
    
  : A(m, n)

  RW A <- A(m, n)
       -> A LACPY_U(m, n)
BODY
/* nothing */
END

LACPY_U(m, n)

// Execution space
m = 0   .. descA.mt-1
n = m+1 .. ((uplo == plasma_lower) ? 0 : descA.nt-1)

// Parallel partitioning
: B(m, n)

// Parameters

READ  A <- A lacpy_u_in_Amn(m, n)
RW    B <- B(m, n)
        -> B(m, n)
BODY
  int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
  int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
  int ldam = BLKLDD( descA, m );
  int ldbm = BLKLDD( descB, m );

        DRYRUN(
               LAPACKE_zlacpy_work( 
                   LAPACK_COL_MAJOR, 'A',
                   tempmm, tempnn, 
                   A, ldam, B, ldbm);
               );

        printlog("thread %d lacpy_u( %d, %d )\n"
                 "    ( %s, %d, %d, A(%d,%d), %d, B(%d,%d), %d)\n",
                 context->eu_id, m, n, 
                 plasma_const(uplo), tempmm, tempnn, 
                 m, n, ldam, m, n, ldbm);
END

lacpy_diag_in_Akk(k)  [profile = off]
     k = 0 .. ( descA.mt < descA.nt ? descA.mt-1 : descA.nt-1 )
    
  : A(k, k)

  RW A <- A(k, k)
       -> A LACPY_DIAG(k)
BODY
/* nothing */
END

LACPY_DIAG(k)

// Execution space
     k = 0 .. ( descA.mt < descA.nt ? descA.mt-1 : descA.nt-1 )

// Parallel partitioning
: B(k, k)

// Parameters

READ  A <- A lacpy_diag_in_Akk(k)
RW    B <- B(k, k)
        -> B(k, k)
BODY
  int tempkm = ((k)==((descA.mt)-1)) ? ((descA.m)-(k*(descA.mb))) : (descA.mb);
  int tempkn = ((k)==((descA.nt)-1)) ? ((descA.n)-(k*(descA.nb))) : (descA.nb);
  int ldak = BLKLDD( descA, k );
  int ldbk = BLKLDD( descB, k );

        DRYRUN(
               LAPACKE_zlacpy_work( 
                   LAPACK_COL_MAJOR,
                   lapack_const(uplo), tempkm, tempkn, 
                   A, ldak, B, ldbk);
               );

        printlog("thread %d lacpy_diag( %d, %d )\n"
                 "    ( %s, %d, %d, A(%d,%d), %d, B(%d,%d), %d)\n",
                 context->eu_id, k, k, 
                 plasma_const(uplo), tempkm, tempkn, 
                 k, k, ldak, k, k, ldbk);
END
extern "C" %{

%}
