extern "C" %{
/*
 *  Copyright (c) 2010      
 * 
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>


#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/dplasmajdf.h"
%}

/*
 * Globals
 */
side   [type = PLASMA_enum]
uplo   [type = PLASMA_enum]
alpha  [type = dague_complex64_t]
beta   [type = double]
descA  [type = "tiled_matrix_desc_t"]
A      [type = "dague_ddesc_t *"]
descB  [type = "tiled_matrix_desc_t"]
B      [type = "dague_ddesc_t *"]
descC  [type = "tiled_matrix_desc_t"]
C      [type = "dague_ddesc_t *"]

plasma_upper   [type="PLASMA_enum" hidden=on default=PlasmaUpper ]
plasma_lower   [type="PLASMA_enum" hidden=on default=PlasmaLower ]
plasma_left    [type="PLASMA_enum" hidden=on default=PlasmaLeft  ]
plasma_right   [type="PLASMA_enum" hidden=on default=PlasmaRight ]

hemm_in_A(m, n) [profile = off]
// Execution space
m = 0 .. descA.mt-1
n = ((uplo == plasma_upper) ? m : 0) .. ((uplo == plasma_upper) ? descA.nt-1 : m)
c = ( (side == plasma_left) ? ((uplo == plasma_lower) ? 0 : 1 ) : ((uplo == plasma_lower) ? 2 : 3) )
    
: A(m, n)

  RW A <- A(m, n)
       ->  (c == 0) || (c == 1)              ? A HEMM(m, 0..descC.nt-1, n)
       -> ((c == 0) || (c == 1)) && (m != n) ? A HEMM(n, 0..descC.nt-1, m)
       ->  (c == 2) || (c == 3)              ? B HEMM(0..descC.mt-1, n, m)
       -> ((c == 2) || (c == 3)) && (m != n) ? B HEMM(0..descC.mt-1, m, n)
BODY
/* nothing */
END

hemm_in_B(m, n) [profile = off]
// Execution space
m = 0 .. descB.mt-1
n = 0 .. descB.nt-1
c = ( (side == plasma_left) ? ((uplo == plasma_lower) ? 0 : 1 ) : ((uplo == plasma_lower) ? 2 : 3) )
    
: B(m, n)

  RW B <- B(m, n)
       -> (c == 0) || (c == 1) ? B HEMM(0..descB.mt-1, n, m)
       -> (c == 2) || (c == 3) ? A HEMM(m, 0..descB.nt-1, n)
BODY
/* nothing */
END

HEMM(m, n, k)

// Execution space
m = 0 .. descC.mt-1
n = 0 .. descC.nt-1
k = 0 .. (side == plasma_left ) ? descC.mt-1 : descC.nt-1
c = ( (side == plasma_left) ? ((uplo == plasma_lower) ? 0 : 1 ) : ((uplo == plasma_lower) ? 2 : 3) )

/* k = ( (side == plasma_left) ? ((uplo == plasma_lower) ? 0 : m+1 ) : ((uplo == plasma_lower) ? n+1 : 0) ) .. ( (side == plasma_left) ? ((uplo == plasma_lower) ? m-1 : descC.mt-1 ) : ((uplo == plasma_lower) ? descC.nt-1 : n-1) ) */

// Parallel partitioning
: C(m, n)

// Parameters

READ  A <- (c == 0) && (k <= m) ? A hemm_in_A(m, k) 
        <- (c == 0) && (k >  m) ? A hemm_in_A(k, m) 
        <- (c == 1) && (k <= m) ? A hemm_in_A(k, m)
        <- (c == 1) && (k >  m) ? A hemm_in_A(m, k) 
        <- (c == 2) || (c == 3) ? B hemm_in_B(m, k) 
READ  B <- (c == 2) && (k <= n) ? A hemm_in_A(n, k)
        <- (c == 2) && (k <= n) ? A hemm_in_A(k, n) 
        <- (c == 3) && (k <= n) ? A hemm_in_A(k, n)
        <- (c == 3) && (k <= n) ? A hemm_in_A(n, k) 
        <- (c == 0) || (c == 1) ? B hemm_in_B(k, n) 
RW    C <- ( k == 0 ) ? C(m, n) : C HEMM( m, n, k-1 )
        -> ( ( (side == plasma_left) && (k == descC.mt-1) ) || ( (side == plasma_right) && (k == descC.nt-1) ) ) ? C( m, n ) : C HEMM(m, n, k+1)
BODY

    dague_complex64_t zbeta = (k == 0) ? beta : (dague_complex64_t)1.0;
    int tempmm = ( m == descC.mt-1 ) ? descC.m - m * descC.mb : descC.mb;
    int tempnn = ( n == descC.nt-1 ) ? descC.n - n * descC.nb : descC.nb;
    int ldcm   = BLKLDD( descC, m );

    DRYRUN(
        if (side == PlasmaLeft && k == m) {
            int ldam = BLKLDD( descA, m );
            int ldbk = BLKLDD( descB, k );

            CORE_zhemm(
                side, uplo,
                tempmm, tempnn,
                alpha, A, ldam,
                       B, ldbk,
                zbeta, C, ldcm);
        }
        else if (side == PlasmaRight && k == n) {
            int ldak = BLKLDD( descA, k );
            int ldbm = BLKLDD( descB, m );

            CORE_zhemm(
                side, uplo,
                tempmm, tempnn,
                alpha, B, ldak,
                       A, ldbm,
                zbeta, C, ldcm);
        } else {
            PLASMA_enum transl = (c == 0 && k > m) || (c == 1 && k < m) ? PlasmaConjTrans : PlasmaNoTrans;
            PLASMA_enum transr = (c == 3 && k > n) || (c == 2 && k < n) ? PlasmaConjTrans : PlasmaNoTrans;
            int tempk = (side == PlasmaLeft) ? (( k == descC.mt-1 ) ? descC.m - k * descC.mb : descC.mb)
                :                              (( k == descC.nt-1 ) ? descC.n - k * descC.nb : descC.nb);
            
            int lda = (side == PlasmaRight) ? BLKLDD(descB, m) 
                : ((c == 0 && k > m) || (c == 1 && k < m) ? BLKLDD(descA, k) : BLKLDD(descA, m) );
            int ldb = (side == PlasmaLeft) ? BLKLDD(descB, k) 
                : ((c == 3 && k > n) || (c == 2 && k < n) ? BLKLDD(descA, n) : BLKLDD(descA, k) );

            CORE_zgemm(
                transl, transr,
                tempmm, tempnn, tempk,
                alpha, A, lda,
                       B, ldb,  
                zbeta, C, ldcm); /* ldc * Y */
        }
        );

    printlog("hemm( %d, %d, %d )\n",
             /* "    ( %s, %d, %d, A(%d,%d), %d, B(%d,%d), %d)\n", */
             m, n, k);
             /* plasma_const(uplo), tempmm, tempnn,  */
             /* m, n, ldam, m, n, ldbm); */
END

extern "C" %{

%}
