extern "C" %{
/*
 *  Copyright (c) 2010-2012
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"

#if defined(HAVE_CUDA) && defined(PRECISION_s)
#include "gpu_data.h"
#include "dplasma/cores/cuda_sgemm.h"
extern int *gpu_counter;
extern dague_gpu_data_map_t dague_gpu_map;
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */
%}

/* Globals
 */
PRI_CHANGE   [type = int hidden = on]
uplo         [type = PLASMA_enum]
descA        [type = "tiled_matrix_desc_t"]
A            [type = "dague_ddesc_t *"]
INFO         [type = "int*"]

/**************************************************
 *                      POTRF                     *
 **************************************************/
POTRF(k) [high_priority = on]

// Execution space
k = 0..descA.mt-1

// Parallel partitioning
:A(k, k)

// Parameters
RW T <- (k == 0) ? A(k, k) : T HERK(k, k-1)
     -> T TRSM(k, k+1..descA.mt-1)
     -> A(k, k)
WRITE   F -> F GEMM(k, k+1..descA.mt-1, 0)

; (k >= (descA.mt - PRI_CHANGE)) ? (descA.mt - k) * (descA.mt - k) * (descA.mt - k) : 1000000000

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    dague_gpu_update_data_version( &dague_gpu_map, GEMM_KEY(k, k) );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempkm = k == descA.mt-1 ? descA.m - k*descA.mb : descA.mb;
    int ldak = BLKLDD( descA, k );

    (void) F;
    DRYRUN(
        int iinfo = 0;
        CORE_zpotrf(
            uplo, tempkm, T, ldak,
            &iinfo );
        if ( iinfo != 0 && *INFO == 0 )
            *INFO = k*descA.mb+iinfo; /* Should return here */
         );
    printlog(
             "thread %d VP %d CORE_zpotrf( %d )\n\t( %s, %d, A(%d,%d)[%p], %d)\n",
             context->th_id, context->virtual_process->vp_id, k,
             plasma_const(uplo), tempkm, k, k, T, descA.mb );
END


/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM(k, m) [high_priority = on]

// Execution space
k = 0..descA.mt-1
m = k+1..descA.mt-1

// Parallel partitioning
: A(m, k)

// Parameters
READ    T <- T POTRF(k)
RW      C <- (k == 0) ? A(m, k) : C GEMM(k, m, k-1)
          -> A HERK(m, k)
          -> A GEMM(m, m+1..descA.mt-1, k)
          -> B GEMM(k+1..m-1, m, k)
          -> (m == k+1) ? F HERK(m, 0)
          -> A(m, k)

; (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m) * (descA.mt - m) * (descA.mt - m) + 3 * (2 * descA.mt - k - m - 1) * (m - k) : 1000000000

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    dague_gpu_update_data_version( &dague_gpu_map, GEMM_KEY(m, k) );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempmm = m == descA.mt-1 ? descA.m - m * descA.mb : descA.mb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    if( uplo == PlasmaLower ) {
        DRYRUN(
            CORE_ztrsm(
                PlasmaRight, PlasmaLower, PlasmaTrans, PlasmaNonUnit,
                tempmm, descA.nb,
                (Dague_Complex64_t)1.0, T /*A(k, k)*/, ldak,
                                        C /*A(m, k)*/, ldam )
            );
        printlog("thread %d VP %d CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
                 context->th_id, context->virtual_process->vp_id, m, k,
                 plasma_const( PlasmaRight ), plasma_const( PlasmaLower ),
                 plasma_const( PlasmaTrans ), plasma_const( PlasmaNonUnit ),
                 tempmm, descA.nb,
                 1.0, k, k, T, ldak,
                      m, k, C, ldam);
    } else {
        DRYRUN(
            CORE_ztrsm(
                PlasmaLeft, PlasmaUpper, PlasmaTrans, PlasmaNonUnit,
                tempmm, descA.nb,
                (Dague_Complex64_t)1.0, T /*A(k, k)*/, ldak,
                                        C /*A(k, m)*/, ldam )
            );
        printlog("thread %d VP %d CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
                 context->th_id, context->virtual_process->vp_id, m, k,
                 plasma_const( PlasmaLeft ), plasma_const( PlasmaUpper ),
                 plasma_const( PlasmaTrans ), plasma_const( PlasmaNonUnit ),
                 tempmm, descA.nb,
                 1.0, k, k, T, ldak,
                      m, k, C, ldam);
    }
END


/**************************************************
 *                      HERK                      *
 **************************************************/
HERK_IN_A(k)  [profile = off]
k = 1..descA.mt-1

:A(k, k)

READ A <- A(k, k)
       -> T HERK(k, 0..k-1)

BODY
 /* Nothing */
END

HERK_IN_F(k)  [profile = off]
k = 1..descA.mt-1

:A(k, k)

READ A <- A(k, k)
       -> F HERK(k, 0..k-1)

BODY
 /* Nothing */
END

HERK(k, m) [high_priority = on]

// Execution space
k = 1..descA.mt-1
m = 0..k-1

// Parallel partitioning
: A(m, m)

//Parameters
READ  A <- C TRSM(m, k)
READ  F <- (m == 0) ? C TRSM(k-1, k) : A HERK_IN_F(k)
RW    T <- (m == 0) ? A HERK_IN_A(k) : T HERK(k, m-1)
        -> (m == k-1) ? T POTRF(k) : T HERK(k, m+1)

; (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m) * (descA.mt - m) * (descA.mt - m) + 3 * (m - k) : 1000000000

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    dague_gpu_update_data_version( &dague_gpu_map, GEMM_KEY(m, m) );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempmm = m == descA.mt-1 ? descA.m - m*descA.mb : descA.mb;
    int ldam = BLKLDD( descA, m );

    (void) F;
    if( uplo == PlasmaLower ) {
        DRYRUN(
            CORE_zherk(
                PlasmaLower, PlasmaNoTrans,
                tempmm, descA.mb,
                (double)-1.0, A /*A(k, n)*/, ldam,
                (double) 1.0, T /*A(k, k)*/, ldam )
            );
        printlog(
                 "thread %d VP %d CORE_zherk( %d, %d )\n\t( %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
                 context->th_id, context->virtual_process->vp_id, k, m,
                 plasma_const( PlasmaLower ), plasma_const( PlasmaNoTrans ),
                 tempmm, descA.mb,
                 -1.0, m, k, A, ldam,
                  1.0, m, m, T, ldam);
    } else {
        DRYRUN(
            CORE_zherk(
                PlasmaUpper, PlasmaTrans,
                tempmm, descA.mb,
                (double)-1.0, A /*A(m, k)*/, ldam,
                (double) 1.0, T /*A(k, k)*/, ldam )
            );
        printlog(
                 "CORE_herk( %s, %s, %d, %d, %f, A(%d,%d), %d, %f, A(%d,%d), %d)\n",
                 plasma_const( PlasmaUpper ), plasma_const( PlasmaTrans ),
                 tempmm, descA.mb,
                 (double)-1.0, m, k, ldam,
                 (double)1.0, k, k, ldam );
    }
END


/**************************************************
 *                      GEMM                      *
 **************************************************/
GEMM_IN_A(k, m)  [profile = off]
k = 0..descA.mt-1
m = k+1..descA.mt-1

:A(m, k)

READ A <- A(m, k)
       -> C GEMM(k, m, 0..k-1)

BODY
  /* Nothing */
END

GEMM_IN_F(k, m)  [profile = off]
k = 0..descA.mt-1
m = k+1..descA.mt-1

:A(m, k)

READ A <- A(m, k)
       -> F GEMM(k, m, 0..k-1)

BODY
  /* Nothing */
END

GEMM(k, m, n)

// Execution space
k = 0..descA.mt-1
m = k+1..descA.mt-1
n = 0..k-1

// Parallel partitioning
: A(m, n)

// Parameters
READ  A <- C TRSM(n, k)
READ  B <- C TRSM(n, m)
READ  F <- (n == 0) ? F POTRF(k) : A GEMM_IN_F(k, m)   /* It's A(n,k) but we need to swap parameter for the parser */
RW    C <- (n == 0) ? A GEMM_IN_A(k, m) : C GEMM(k, m, n-1)
        -> (n == k-1) ? C TRSM(k, m) : C GEMM(k, m, n+1)

; (m >= (descA.mt - PRI_CHANGE)) ? (descA.mt - m) * (descA.mt - m) * (descA.mt - m) + 3 * (2 * descA.mt - m - n - 3) * (m - n) + 6 * (m - k) : 1000000000

BODY
    int tempmm = m == descA.mt-1 ? descA.m - m * descA.mb : descA.mb;
    int ldam = BLKLDD( descA, m );
    int ldan = BLKLDD( descA, n );

#if defined(HAVE_CUDA) && defined(PRECISION_s)
    if( dague_active_gpu() == 1 ) {
        int rc;

        if( 0 == (rc = gpu_sgemm( context, this_task, uplo )) )
            goto FIN;
        if( -1 == rc ) {
            /* We're done, but the task has been already destroyed */
            return -1;
        }
        if( -2 == rc ) {
            /* The GPU failed to execute this task, but the task was already rescheduled */
            fprintf(stderr, "Unable to disable GPU at runtime. Fatal error.\n");
            exit(2);
        }
        /* Continue with the task on the cores */
        device_load[0] -= device_weight[0];  /* lessen the load on the CPUs */
    }
    dague_gpu_update_data_version( &dague_gpu_map, GEMM_KEY(m, k) );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    (void) F;
    if( uplo == PlasmaLower ) {
        DRYRUN(
            CORE_zgemm(
                PlasmaNoTrans, PlasmaTrans,
                tempmm, descA.mb, descA.mb,
                (Dague_Complex64_t)-1.0, B /*A(m, n)*/, ldam,
                                         A /*A(k, n)*/, ldan,
                (Dague_Complex64_t) 1.0, C /*A(m, k)*/, ldam )
            );
        printlog("thread %d VP %d CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
                 context->th_id, context->virtual_process->vp_id, k, m, n,
                 plasma_const( PlasmaNoTrans ),  plasma_const( PlasmaTrans ),
                 tempmm, descA.mb, descA.mb,
                 -1.0, m, k, A, ldam,
                       n, k, B, ldan,
                  1.0, m, n, C, ldam);
    } else {
        DRYRUN(
            CORE_zgemm(
                PlasmaTrans, PlasmaNoTrans,
                tempmm, descA.mb, descA.mb,
                (Dague_Complex64_t)-1.0, A /*A(n, k)*/, ldam,
                                         B /*A(n, m)*/, ldan,
                (Dague_Complex64_t)1.0,  C /*A(k, m)*/, ldam )
            );
        printlog("thread %d VP %d CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
                 context->th_id, context->virtual_process->vp_id, k, m, n,
                 plasma_const( PlasmaTrans ),  plasma_const( PlasmaNoTrans ),
                 tempmm, descA.mb, descA.mb,
                 -1.0, m, k, A, ldam,
                       n, k, B, ldan,
                  1.0, m, n, C, ldam);
    }
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    device_load[0] -= device_weight[0];  /* lessen the load on the CPUs */
FIN:
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

END
