extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */
  
#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "dplasma/lib/dplasmajdf.h"

%}

/* Globals
 * GRIDrows, GRIDcols, NB, SIZE
 */
side [type = int]
uplo [type = int]
trans[type = int]
diag [type = int]

alpha[type = Dague_Complex64_t]

Am   [type = int]
An   [type = int]
Amb  [type = int]
Anb  [type = int]
Amt  [type = int]
Ant  [type = int]

Bm   [type = int]
Bn   [type = int]
Bmb  [type = int]
Bnb  [type = int]
Bmt  [type = int]
Bnt  [type = int]
     
/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM_IN(k)  [profile = off]
k = 0..Bmt-1

:A(k, k)

READ A <- A(k, k)
       -> A TRSM(k, 0..Bnt-1)

BODY
 /* Nothing */
END

TRSM(k, n)

// Execution space
k = 0..Bmt-1
n = 0..Bnt-1

// Parallel partitioning
: B(k,n)

// Parameters
READ  A <- A TRSM_IN(k)
RW    B <- (k == 0) ? B(k, n) : C GEMM(k-1, k, n)
        -> B GEMM(k, k+1..Bmt-1, n)
        -> B(k, n)

BODY
      Dague_Complex64_t lalpha = k == 0 ? alpha : (Dague_Complex64_t)1.0;    
      int tempkm = k == Bmt-1 ? Bm - k * Bmb : Bmb;
      int tempnn = n == Bnt-1 ? Bn - n * Bnb : Bnb;
      DRYRUN(
	   CORE_ztrsm(
			side, uplo, trans, diag,
			tempkm, tempnn,
			lalpha, A /*A(k, k)*/, Amb,
                                B /*B(k, n)*/, Bmb)
	   );

      printlog("thread %d CORE_ztrsm( %d, %d)\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d)\n",
	       context->eu_id, k, n,
               plasma_const( side ), plasma_const( uplo ), 
               plasma_const( trans ), plasma_const( diag ),
               tempkm, tempnn,
	       creal(lalpha), k, k, A /*A(k, k)*/, Amb,
               k, n, B /*B(k, n)*/, Bmb);
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
GEMM_IN(k, m)  [profile = off]
k = 0..Bmt-1
m = k+1..Bmt-1

:A(k, m)

READ A <- A(k, m)
       -> A GEMM(k, m, 0..Bnt-1)

BODY
 /* Nothing */
END

// Name
GEMM(k, m, n)

// Execution space
k = 0..Bmt-1
m = k+1..Bmt-1
n = 0..Bnt-1

// Parallel partitioning
: B(m, n)

// Parameters
READ  A <- A GEMM_IN(k, m)
READ  B <- B TRSM(k, n)
RW    C <- (k == 0) ? B(m, n) : C GEMM(k-1, m, n)
        -> (k+1 == m) ? B TRSM(m, n) : C GEMM(k+1, m, n)

BODY
      Dague_Complex64_t lalpha = k == 0 ? alpha : (Dague_Complex64_t)1.0;    
      int tempmm = m == Bmt-1 ? Bm - m * Bmb : Bmb;
      int tempnn = n == Bnt-1 ? Bn - n * Bnb : Bnb;
      DRYRUN(
	   CORE_zgemm(
			trans, PlasmaNoTrans,
                        tempmm, tempnn, Bmb,
			(Dague_Complex64_t)-1.0, A /* A(k, m)*/ , Amb,
			              B /* B(k, n)*/ , Bmb,
			lalpha,       C /* B(m, n)*/ , Bmb)
	   );

      printlog("thread %d CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, B(%d,%d)[%p], %d, %f, B(%d,%d)[%p], %d)\n",
	       context->eu_id, k, m, n, 
               plasma_const( trans ), plasma_const( PlasmaNoTrans ), 
               tempmm, tempnn, Bmb, 
	       -1.0, k, m, A, Amb,
                             k, n, B, Bmb,
	       creal(lalpha),       m, n, C, Bmb);
END
