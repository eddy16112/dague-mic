extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */
#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "memory_pool.h"
%}

uplo [type = "PLASMA_enum"]
A [type = "PLASMA_desc"]
T [type = "PLASMA_desc"]
sequence [type = "PLASMA_sequence"]
request [type = "PLASMA_request"]


zgelqt(k)
  /* Execution space */
  k = 0..(A.nt)-1-1

  : A(k,k+1)

  /* A == data_A(k,k+1) */
  /* B == data_T(k,k+1) */
  /* C == data_A(k,k+1) */
  /* D == data_T(k,k+1) */
  /* F == data_A(k,k+1) */
  /* G == data_T(k,k+1) */
  /* J == data_A(k,k+1) */
  /* M == data_A(k+1,i) */
  /* V == data_A(k+1,n1) */

  RW    A <- (A.nt>=(k+3)) & (k>=1) ? M ztsmlq_hetra1(k+1-2, A.nt-1, k+1) 
          <- (0==k) ? data_A(k,k+1)
          <- ((2+k)==A.nt) & (k>=1) ? V ztsmlq_corner(A.nt-1-2, k+1) 
          -> C zherfb(k) 
          -> (A.nt>=(3+k)) ? J ztslqt(k, k+2) 
          -> (A.nt==(2+k)) ? data_A(k,k+1)
          -> (A.nt>=(k+3)) ? F zunmlq(k, (k+2)..(A.nt-1)) 
  RW    B <- data_T(k,k+1)
          -> D zherfb(k) 
          -> data_T(k,k+1)
          -> (A.nt>=(k+3)) ? G zunmlq(k, (k+2)..(A.nt-1)) 

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempkn = ((k+1)==((A.nt)-1)) ? ((A.n)-((k+1)*(A.nb))) : (A.nb);
  int ib = PLASMA_IB;

  void *pool_A = dague_private_memory_pop( pool_0 );
  void *pool_B = dague_private_memory_pop( pool_1 );

#line 67 "pzherbt-U.c"
  CORE_zgelqt(A.nb, tempkn, ib, 
	A /* data_A(k,k+1) */, A.nb, B /* data_T(k,k+1) */, 
	T.mb, pool_A, pool_B );

  dague_private_memory_push( pool_A, pool_0 );
  dague_private_memory_push( pool_B, pool_1 );

  printlog("thread %d CORE_zgelqt(%d)\n\t(A.nb, tempkn, ib, A(%d,%d)[%p], A.nb, T(%d,%d)[%p], T.mb, pool_A, pool_B)\n",
  context->eu_id, k, k, k+1, A, k, k+1, B);

END


zherfb(k)
  /* Execution space */
  k = 0..(A.nt)-1-1

  : A(k+1,k+1)

  /* A == data_A(k,k+1) */
  /* B == data_T(k,k+1) */
  /* C == data_A(k,k+1) */
  /* D == data_T(k,k+1) */
  /* E == data_A(k+1,k+1) */
  /* U == data_A(k+1,k+1) */
  /* W == data_A(n1,n1) */

  READ  C <- A zgelqt(k) 
  READ  D <- B zgelqt(k) 
  RW    E <- (k>=1) ? W ztsmlq_corner(k+1-2, k+1) 
          <- (0==k) ? data_A(k+1,k+1)
          -> (A.nt==(k+2)) ? data_A(k+1,k+1)
          -> (A.nt>=(3+k)) ? U ztsmlq_cormer(k, k+2) 

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempkn = ((k+1)==((A.nt)-1)) ? ((A.n)-((k+1)*(A.nb))) : (A.nb);
  int ib = PLASMA_IB;
  int ldak = BLKLDD( A, k+1 );

  void *pool_A = dague_private_memory_pop( pool_2 );

#line 81 "pzherbt-U.c"
  CORE_zherfb(PlasmaUpper, tempkn, tempkn, 
	ib, T.nb, C /* data_A(k,k+1) */, 
	A.nb, D /* data_T(k,k+1) */, T.mb, 
	E /* data_A(k+1,k+1) */, ldak, pool_A, 
	T.nb );

  dague_private_memory_push( pool_A, pool_2 );

  printlog("thread %d CORE_zherfb(%d)\n\t(PlasmaUpper, tempkn, tempkn, ib, T.nb, A(%d,%d)[%p], A.nb, T(%d,%d)[%p], T.mb, A(%d,%d)[%p], ldak, pool_A, T.nb)\n",
  context->eu_id, k, k, k+1, C, k, k+1, D, k+1, k+1, E);

END


zunmlq(k,n)
  /* Execution space */
  k = 0..(A.nt)-1-1
  n = k+2..A.nt-1

  : A(k+1,n)

  /* A == data_A(k,k+1) */
  /* B == data_T(k,k+1) */
  /* F == data_A(k,k+1) */
  /* G == data_T(k,k+1) */
  /* H == data_A(k+1,n) */
  /* N == data_A(i,n1) */
  /* Q == data_A(k+1,j) */
  /* V == data_A(k+1,n1) */

  READ  F <- A zgelqt(k) 
  READ  G <- B zgelqt(k) 
  RW    H <- (0==k) ? data_A(k+1,n)
          <- (k>=1) ? N ztsmlq_hetra1(k+1-2, n, k+1) 
          -> ((2+k)==n) ? V ztsmlq_corner(n-2, n) 
          -> (n>=(3+k)) ? Q ztsmlq(k, k+2, n) 

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempnn = ((n)==((A.nt)-1)) ? ((A.n)-(n*(A.nb))) : (A.nb);
  int tempkn = ((k+1)==((A.nt)-1)) ? ((A.n)-((k+1)*(A.nb))) : (A.nb);
  int ib = PLASMA_IB;
  int ldak = BLKLDD( A, k+1 );

  void *pool_A = dague_private_memory_pop( pool_1 );

#line 101 "pzherbt-U.c"
  CORE_zunmlq(PlasmaLeft, PlasmaNoTrans, A.nb, 
	tempnn, tempkn, ib, 
	F /* data_A(k,k+1) */, A.nb, G /* data_T(k,k+1) */, 
	T.mb, H /* data_A(k+1,n) */, ldak, 
	pool_A, T.nb );

  dague_private_memory_push( pool_A, pool_1 );

  printlog("thread %d CORE_zunmlq(%d, %d)\n\t(PlasmaLeft, PlasmaNoTrans, A.nb, tempnn, tempkn, ib, A(%d,%d)[%p], A.nb, T(%d,%d)[%p], T.mb, A(%d,%d)[%p], ldak, pool_A, T.nb)\n",
  context->eu_id, k, n, k, k+1, F, k, k+1, G, k+1, n, H);

END


ztslqt(k,n1)
  /* Execution space */
  k = 0..(A.nt)-1-1
  n1 = k+2..A.nt-1

  : A(k,k+1)

  /* A == data_A(k,k+1) */
  /* J == data_A(k,k+1) */
  /* K == data_A(k,n1) */
  /* L == data_T(k,n1) */
  /* M == data_A(k+1,i) */
  /* O == data_A(k,n1) */
  /* P == data_T(k,n1) */
  /* S == data_A(k,n1) */
  /* T == data_T(k,n1) */
  /* V == data_A(k+1,n1) */
  /* X == data_A(k,n1) */
  /* Y == data_T(k,n1) */

  RW    J <- (n1>=(k+3)) ? J ztslqt(k, n1-1) 
          <- ((2+k)==n1) ? A zgelqt(k) 
          -> (A.nt>=(n1+2)) ? J ztslqt(k, n1+1) 
          -> (A.nt==(n1+1)) ? data_A(k,k+1)
  RW    K <- ((n1+1)==A.nt) & (k>=1) ? V ztsmlq_corner(k-1, A.nt-1) 
          <- (A.nt>=(n1+2)) & (k>=1) ? M ztsmlq_hetra1(k-1, A.nt-1, n1) 
          <- (0==k) ? data_A(k,n1)
          -> (n1>=(k+3)) ? O ztsmlq_hetra1(k, n1, (k+2)..(n1-1)) 
          -> (A.nt>=(n1+2)) ? S ztsmlq(k, n1, (n1+1)..(A.nt-1)) 
          -> data_A(k,n1)
          -> X ztsmlq_corner(k, n1) 
  RW    L <- data_T(k,n1)
          -> data_T(k,n1)
          -> (n1>=(k+3)) ? P ztsmlq_hetra1(k, n1, (k+2)..(n1-1)) 
          -> (A.nt>=(n1+2)) ? T ztsmlq(k, n1, (n1+1)..(A.nt-1)) 
          -> Y ztsmlq_corner(k, n1) 

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempnn = ((n1)==((A.nt)-1)) ? ((A.n)-(n1*(A.nb))) : (A.nb);
  int ib = PLASMA_IB;

  void *pool_A = dague_private_memory_pop( pool_0 );
  void *pool_B = dague_private_memory_pop( pool_1 );

#line 123 "pzherbt-U.c"
  CORE_ztslqt(A.nb, tempnn, ib, 
	J /* data_A(k,k+1) */, A.nb, K /* data_A(k,n1) */, 
	A.nb, L /* data_T(k,n1) */, T.mb, 
	pool_A, pool_B );

  dague_private_memory_push( pool_A, pool_0 );
  dague_private_memory_push( pool_B, pool_1 );

  printlog("thread %d CORE_ztslqt(%d, %d)\n\t(A.nb, tempnn, ib, A(%d,%d)[%p], A.nb, A(%d,%d)[%p], A.nb, T(%d,%d)[%p], T.mb, pool_A, pool_B)\n",
  context->eu_id, k, n1, k, k+1, J, k, n1, K, k, n1, L);

END


ztsmlq_hetra1(k,n1,i)
  /* Execution space */
  k = 0..(A.nt)-1-1
  n1 = k+2..A.nt-1
  i = k+2..n1-1

  : A(k+1,i)

  /* A == data_A(k,k+1) */
  /* H == data_A(k+1,n) */
  /* K == data_A(k,n1) */
  /* L == data_T(k,n1) */
  /* M == data_A(k+1,i) */
  /* N == data_A(i,n1) */
  /* O == data_A(k,n1) */
  /* P == data_T(k,n1) */
  /* R == data_A(n1,j) */
  /* V == data_A(k+1,n1) */

  RW    M <- (n1>=(i+2)) ? M ztsmlq_hetra1(k, n1-1, i) 
          <- ((i+1)==n1) ? V ztsmlq_corner(k, n1-1) 
          -> (A.nt>=(n1+2)) ? M ztsmlq_hetra1(k, n1+1, i) 
          -> ((1+n1)==A.nt) & ((k+2)==i) ? A zgelqt(i-1) 
          -> (A.nt==(n1+1)) & (i>=(k+3)) ? K ztslqt(k+1, i) 
  RW    N <- (k>=1) ? N ztsmlq_hetra1(k-1, n1, i) 
          <- R ztsmlq(k, i, n1) 
          -> ((k+2)==i) ? H zunmlq(i-1, n1) 
          -> (i>=(3+k)) ? N ztsmlq_hetra1(k+1, n1, i) 
  READ  O <- K ztslqt(k, n1) 
  READ  P <- L ztslqt(k, n1) 

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempnn = ((n1)==((A.nt)-1)) ? ((A.n)-(n1*(A.nb))) : (A.nb);
  int ib = PLASMA_IB;
  int ldak = BLKLDD( A, k+1 );
  int ldai = BLKLDD( A, i );
  int ldwork = ((PlasmaRight)==(PlasmaLeft)) ? (ib) : (T.nb);

  void *pool_A = dague_private_memory_pop( pool_1 );

#line 142 "pzherbt-U.c"
  CORE_ztsmlq_hetra1(PlasmaRight, PlasmaConjTrans, A.mb, 
	A.nb, A.nb, tempnn, 
	A.nb, ib, M /* data_A(k+1,i) */, 
	ldak, N /* data_A(i,n1) */, ldai, 
	O /* data_A(k,n1) */, A.nb, P /* data_T(k,n1) */, 
	T.mb, pool_A, ldwork );

  dague_private_memory_push( pool_A, pool_1 );

  printlog("thread %d CORE_ztsmlq_hetra1(%d, %d, %d)\n\t(PlasmaRight, PlasmaConjTrans, A.mb, A.nb, A.nb, tempnn, A.nb, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldai, A(%d,%d)[%p], A.nb, T(%d,%d)[%p], T.mb, pool_A, ldwork)\n",
  context->eu_id, k, n1, i, k+1, i, M, i, n1, N, k, n1, O, k, n1, P);

END


ztsmlq(k,n1,j)
  /* Execution space */
  k = 0..(A.nt)-1-1
  n1 = k+2..A.nt-1
  j = n1+1..A.nt-1

  : A(k+1,j)

  /* H == data_A(k+1,n) */
  /* K == data_A(k,n1) */
  /* L == data_T(k,n1) */
  /* N == data_A(i,n1) */
  /* Q == data_A(k+1,j) */
  /* R == data_A(n1,j) */
  /* S == data_A(k,n1) */
  /* T == data_T(k,n1) */
  /* V == data_A(k+1,n1) */

  RW    Q <- (n1>=(3+k)) ? Q ztsmlq(k, n1-1, j) 
          <- ((k+2)==n1) ? H zunmlq(k, j) 
          -> ((1+n1)==j) ? V ztsmlq_corner(k, j) 
          -> (j>=(2+n1)) ? Q ztsmlq(k, n1+1, j) 
  RW    R <- (0==k) ? data_A(n1,j)
          <- (k>=1) ? R ztsmlq(k-1, n1, j) 
          -> N ztsmlq_hetra1(k, j, n1) 
          -> (n1>=(3+k)) ? R ztsmlq(k+1, n1, j) 
  READ  S <- K ztslqt(k, n1) 
  READ  T <- L ztslqt(k, n1) 

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempjj = ((j)==((A.nt)-1)) ? ((A.n)-(j*(A.nb))) : (A.nb);
  int tempnn = ((n1)==((A.nt)-1)) ? ((A.n)-(n1*(A.nb))) : (A.nb);
  int ib = PLASMA_IB;
  int ldak = BLKLDD( A, k+1 );
  int ldan = BLKLDD( A, n1 );
  int ldwork = ((PlasmaLeft)==(PlasmaLeft)) ? (ib) : (T.nb);

  void *pool_A = dague_private_memory_pop( pool_1 );

#line 170 "pzherbt-U.c"
  CORE_ztsmlq(PlasmaLeft, PlasmaNoTrans, A.nb, 
	tempjj, tempnn, tempjj, 
	A.nb, ib, Q /* data_A(k+1,j) */, 
	ldak, R /* data_A(n1,j) */, ldan, 
	S /* data_A(k,n1) */, A.nb, T /* data_T(k,n1) */, 
	T.mb, pool_A, ldwork );

  dague_private_memory_push( pool_A, pool_1 );

  printlog("thread %d CORE_ztsmlq(%d, %d, %d)\n\t(PlasmaLeft, PlasmaNoTrans, A.nb, tempjj, tempnn, tempjj, A.nb, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldan, A(%d,%d)[%p], A.nb, T(%d,%d)[%p], T.mb, pool_A, ldwork)\n",
  context->eu_id, k, n1, j, k+1, j, Q, n1, j, R, k, n1, S, k, n1, T);

END


ztsmlq_corner(k,n1)
  /* Execution space */
  k = 0..(A.nt)-1-1
  n1 = k+2..A.nt-1

  : A(k+1,k+1)

  /* A == data_A(k,k+1) */
  /* E == data_A(k+1,k+1) */
  /* H == data_A(k+1,n) */
  /* K == data_A(k,n1) */
  /* L == data_T(k,n1) */
  /* M == data_A(k+1,i) */
  /* Q == data_A(k+1,j) */
  /* U == data_A(k+1,k+1) */
  /* V == data_A(k+1,n1) */
  /* W == data_A(n1,n1) */
  /* X == data_A(k,n1) */
  /* Y == data_T(k,n1) */

  RW    U <- (n1>=(3+k)) ? U ztsmlq_corner(k, n1-1) 
          <- ((2+k)==n1) ? E zherfb(k) 
          -> (A.nt>=(n1+2)) ? U ztsmlq_corner(k, n1+1) 
          -> (A.nt==(n1+1)) ? data_A(k+1,k+1)
  RW    V <- (n1==(k+2)) ? H zunmlq(k+2-2, k+2) 
          <- (n1>=(k+3)) ? Q ztsmlq(k, n1-1, n1) 
          -> (A.nt>=(2+n1)) ? M ztsmlq_hetra1(k, n1+1, n1) 
          -> (A.nt==(n1+1)) & (A.nt==(3+k)) ? A zgelqt(n1-1) 
          -> (A.nt==(n1+1)) & (A.nt>=(4+k)) ? K ztslqt(k+1, n1) 
  RW    W <- (0==k) ? data_A(n1,n1)
          <- (k>=1) ? W ztsmlq_corner(k-1, n1) 
          -> ((k+2)==n1) ? E zherfb(n1-1) 
          -> (n1>=(k+3)) ? W ztsmlq_corner(k+1, n1) 
  READ  X <- K ztslqt(k, n1) 
  READ  Y <- L ztslqt(k, n1) 

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempnn = ((n1)==((A.nt)-1)) ? ((A.n)-(n1*(A.nb))) : (A.nb);
  int ib = PLASMA_IB;
  int ldak = BLKLDD( A, k+1 );
  int ldan = BLKLDD( A, n1 );
  int ldwork = T.nb;

  void *pool_A = dague_private_memory_pop( pool_3 );

#line 195 "pzherbt-U.c"
  CORE_ztsmlq_corner(A.nb, A.nb, A.nb, 
	tempnn, tempnn, tempnn, 
	A.nb, ib, T.nb, 
	U /* data_A(k+1,k+1) */, ldak, V /* data_A(k+1,n1) */, 
	ldak, W /* data_A(n1,n1) */, ldan, 
	X /* data_A(k,n1) */, A.nb, Y /* data_T(k,n1) */, 
	T.mb, pool_A, ldwork );

  dague_private_memory_push( pool_A, pool_3 );

  printlog("thread %d CORE_ztsmlq_corner(%d, %d)\n\t(A.nb, A.nb, A.nb, tempnn, tempnn, tempnn, A.nb, ib, T.nb, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldan, A(%d,%d)[%p], A.nb, T(%d,%d)[%p], T.mb, pool_A, ldwork)\n",
  context->eu_id, k, n1, k+1, k+1, U, k+1, n1, V, n1, n1, W, k, n1, X, k, n1, Y);

END
