extern "C" %{
  /**
   * PLASMA include for defined and constants.
   *
   * @precisions normal z -> s d c
   *
   */
#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "dplasma.h"
#include "dplasmajdf.h"

#define PRECISION_z

#if defined(HAVE_CUDA)
#undef HAVE_CUDA
#endif

#if defined(HAVE_CUDA) && defined(PRECISION_s)
#include "gpu_data.h"
#include "cuda_zgemm.h"
extern int *gpu_counter;
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */
%}

/* Globals
 */
ib           [type = int]
INFO         [type = "int*"]

Am   [type = int]
An   [type = int]
Amb  [type = int]
Anb  [type = int]
Amt  [type = int]
Ant  [type = int]

/**************************************************
 *                      DDTRF                     *
 **************************************************/
DDTRF(k) [high_priority = on]

// Execution space
k = 0..( (Amt < Ant) ? Amt-1 : Ant-1 )

// Parallel partitioning
:A(k, k)

// Parameters
RW A <- (k == 0) ? A(k, k) : C GEMM(k-1, k, k)
     -> A TRSM_L(k+1..Amt-1, k)
     -> A TRSM_U(k, k+1..Ant-1)
     -> A(k, k)

//; (k >= (Amt - PRI_CHANGE)) ? (Amt - k) * (Amt - k) * (Amt - k) : 1000000000
//; (k >= (Amt - PRI_CHANGE)) ? (Amt - k + 7) * (Amt - k + 2) * (Amt - k) / 6 : 0

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ | DAGUE_WRITE, k, k );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempkm = k == Amt-1 ? Am - k*Amb : Amb;
    int tempkn = k == Ant-1 ? An - k*Anb : Anb;
    int iinfo = 0;
    DRYRUN(
        CORE_zddtrf(
            tempkm, tempkn, ib, A, Amb,
            &iinfo );
        if ( iinfo != 0 )
            *INFO = k*Amb+iinfo; /* Should return here */
         );

    printlog(
             "thread %d CORE_zddtrf( %d )\n\t( %d, %d, %d A(%d,%d)[%p], %d)\n",
             context->eu_id, k, 
             plasma_const(PlasmaLower), tempkm, tempkn, ib, k, k, A, Amb );
END


/**************************************************
 *                      TRSM_L                    *
 **************************************************/
TRSM_L(m, k) [high_priority = on]

// Execution space
m = 1..Amt-1
k = 0..m-1

// Parallel partitioning
: A(m, k)

// Parameters
READ  A <- A DDTRF(k)
RW    B <- (k == 0) ? A(m, k) : C GEMM(k-1, m, k)
        -> A GEMM(k, m, k+1..Ant-1)
        -> A(m, k)

//; (m >= (Amt - PRI_CHANGE)) ? (Amt - m) * (Amt - m) * (Amt - m) + 3 * ((2 * Amt) - k - m - 1) * (m - k) : 1000000000
//;  (m >= (Amt - PRI_CHANGE)) ? (Amt - m - k) * ((Amt - m - k + 1) / 2 + 2) - 1 + (Amt - m + 2) * (Amt - m + 1) * (Amt - m) / 6 : 0

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ,               k, k );
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ | DAGUE_WRITE, m, k );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempmm = m == Amt-1 ? Am - m * Amb : Amb;
    int tempkn = k == Ant-1 ? An - k * Anb : Anb;
    DRYRUN(
        CORE_ztrsm(
            PlasmaRight, PlasmaUpper, PlasmaNoTrans, PlasmaNonUnit,
            tempmm, tempkn, 
            (Dague_Complex64_t)1.0, A /*A(k, k)*/, Amb,
                                    B /*A(m, k)*/, Amb);
        );

    printlog("thread %d CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
             context->eu_id, m, k,
             plasma_const( PlasmaRight ), plasma_const( PlasmaUpper ),
             plasma_const( PlasmaNoTrans ), plasma_const( PlasmaNonUnit ),
             tempmm, tempkn, 
             1.0, k, k, T, Amb,
                  m, k, C, Amb);

END

/**************************************************
 *                      TRSM_U                    *
 **************************************************/
TRSM_U(k, n) [high_priority = on]

// Execution space
k = 0..( (Amt < Ant) ? Amt-1 : Ant-2 )
n = 1..Ant-1

// Parallel partitioning
: A(k, n)

// Parameters
READ  A <- A DDTRF(k)
RW    B <- (k == 0) ? A(k, n) : C GEMM(k-1, k, n)
        -> B GEMM(k, k+1..Amt-1, n)
        -> A(k, n)

//; (m >= (Amt - PRI_CHANGE)) ? (Amt - m) * (Amt - m) * (Amt - m) + 3 * ((2 * Amt) - k - m - 1) * (m - k) : 1000000000
//;  (m >= (Amt - PRI_CHANGE)) ? (Amt - m - k) * ((Amt - m - k + 1) / 2 + 2) - 1 + (Amt - m + 2) * (Amt - m + 1) * (Amt - m) / 6 : 0

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ,               k, k );
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ | DAGUE_WRITE, k, n );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempnn = n == Ant-1 ? An - n * Anb : Anb;
    int tempkm = k == Amt-1 ? Am - k * Amb : Amb;
    DRYRUN(
        CORE_ztrsm(
            PlasmaLeft, PlasmaLower, PlasmaNoTrans, PlasmaUnit,
            tempkm, tempnn, 
            (Dague_Complex64_t)1.0, A /*A(k, k)*/, Amb,
                                    B /*A(k, n)*/, Amb);
        );

    printlog("thread %d CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
             context->eu_id, m, k,
             plasma_const( PlasmaLeft ), plasma_const( PlasmaLower ),
             plasma_const( PlasmaNoTrans ), plasma_const( PlasmaUnit ),
             tempkm, tempnn, 
             1.0, k, k, A, Amb,
                  k, n, B, Amb);

END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(k, m, n)

// Execution space
k = 0..Amt-1
m = k+1..Amt-1
n = k+1..Ant-1

// Parallel partitioning
: A(m, n)

// Parameters
READ  A <- B TRSM_L(m, k)
READ  B <- B TRSM_U(k, n)
RW    C <- (k == 0) ? A(m, n) : C GEMM(k-1, m, n)
        -> ( (m == k+1) & (n == k+1) ) ? A DDTRF(k+1)
        -> ( (m == k+1) & (n != k+1) ) ? B TRSM_U(k+1, n)
        -> ( (m != k+1) & (n == k+1) ) ? B TRSM_L(m, k+1)
        -> ( (m != k+1) & (n != k+1) ) ? C GEMM(k+1, m, n)

//; (m >= (Amt - PRI_CHANGE)) ? (Amt - m) * (Amt - m) * (Amt - m) + 3 * ((2 * Amt) - m - n - 3) * (m - n) + 6 * (m - k) : 1000000000
//;  (m >= (Amt - PRI_CHANGE)) ? (Amt - m - n) * ((Amt - n - k + 1) / 2 + 2) - 1 + (Amt - m + 2) * (Amt - m + 1) * (Amt - m) / 6 + Amt - n + k + 1 : 0

BODY
    int tempmm = m == Amt-1 ? Am - m * Amb : Amb;
    int tempnn = n == Ant-1 ? An - n * Anb : Anb;

#if defined(HAVE_CUDA) && defined(PRECISION_s)
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ, m, k );
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ, k, n );
    if( dague_using_gpu() > 0 ) {
        int rc;

        if( 0 == (rc = gpu_zgemm( context, exec_context, PlasmaLower )) )
            goto FIN;
        if( -1 == rc ) {
            /* We're done, but the task has been already destroyed */
            return -1;
        }
        if( -2 == rc ) {
            /* The GPU failed to execute this task, but the task was already rescheduled */
	    fprintf(stderr, "Unable to disable GPU at runtime. Fatal error.\n");
	    exit(2);
        }
        /* Continue with the task on the cores */
    }
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ | DAGUE_WRITE, m, n );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    DRYRUN(
        CORE_zgemm( 
            PlasmaNoTrans, PlasmaNoTrans,
            tempmm, tempnn, Amb,
            (Dague_Complex64_t)-1.0, A /*A(m, k)*/, Amb,
                                     B /*A(k, n)*/, Amb,
            (Dague_Complex64_t) 1.0, C /*A(m, n)*/, Amb );
        );
    printlog("thread %d CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             context->eu_id, k, m, n, 
             plasma_const( PlasmaNoTrans ),  plasma_const( PlasmaNoTrans ),
             tempmm, Amb, Amb,
             -1.0, m, k, A, Amb,
                   k, n, B, Amb,
              1.0, m, n, C, Amb);

#if defined(HAVE_CUDA) && defined(PRECISION_s)
FIN:
#endif
END
