extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"

#if defined(HAVE_CUDA) && defined(PRECISION_s) && 0
#include "gpu_data.h"
#include "dplasma/cores/cuda_stsmqr.h"
extern int *gpu_counter;
#endif

%}

descA  [type = "tiled_matrix_desc_t"]
A      [type = "dague_ddesc_t *"]
descT  [type = "tiled_matrix_desc_t"]
T      [type = "dague_ddesc_t *" aligned=A]
ib     [type = "int"]
p_work [type = "dague_memory_pool_t *" size = "(sizeof(Dague_Complex64_t)*ib*descT.nb)"]
p_tau  [type = "dague_memory_pool_t *" size = "(sizeof(Dague_Complex64_t)   *descT.nb)"]


zgeqrt_typechange(k)  [profile = off]
  /* Execution space */
  k = 0..( (descA.mt-1 < descA.nt-1)? descA.mt-1 : descA.nt-1 )

  : A(k,k)

RW A <- A zgeqrt(k)
     -> (descA.nt>=(k+2)) ? C zunmqr(k, (k+1)..(descA.nt-1)) [type = LOWER_TILE]
     -> A(k, k)                                              [type = LOWER_TILE]

BODY
 /* Nothing */
END

zgeqrt(k)
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )

  : A(k,k)

  /* A == A(k,k) */
  /* B == T(k,k) */
  /* C == A(k,k) */
  /* D == T(k,k) */
  /* F == A(k,k) */
  /* K == A(m,n1) */

  RW    A <- (0 == k) ? A(k, k) : K ztsmqr(k-1, k, k)
          -> (descA.mt>=(k+2)) ? F ztsqrt(k, k+1)                [type = UPPER_TILE]
          -> (descA.mt==(k+1)) ? A(k,k)                          [type = UPPER_TILE]
          -> A zgeqrt_typechange(k)
  RW    B <- T(k, k)                                             [type = LITTLE_T]
          -> T(k, k)                                             [type = LITTLE_T]
          -> (descA.nt-1 > k) ? D zunmqr(k, (k+1)..(descA.nt-1)) [type = LITTLE_T]

  /* Priority */
  ;(descA.nt-k)*(descA.nt-k)*(descA.nt-k)

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s) && 0
    gpu_qr_mark_data_usage( 0, &descA, DAGUE_READ | DAGUE_WRITE, k, k );
    gpu_qr_mark_data_usage( 1, &descT, DAGUE_READ | DAGUE_WRITE, k, k );
#endif  /* defined(HAVE_CUDA)  && defined(PRECISION_s) */

    DRYRUN(
        int tempkm = ((k)==((descA.mt)-1)) ? ((descA.m)-(k*(descA.mb))) : (descA.mb);
        int tempkn = ((k)==((descA.nt)-1)) ? ((descA.n)-(k*(descA.nb))) : (descA.nb);
        int ldak = BLKLDD( descA, k );

        void *p_elem_A = dague_private_memory_pop( p_tau  );
        void *p_elem_B = dague_private_memory_pop( p_work );

        CORE_zgeqrt(tempkm, tempkn, ib,
                    A /* A(k,k) */, ldak,
                    B /* T(k,k) */, descT.mb,
                    p_elem_A, p_elem_B );

        dague_private_memory_push( p_tau , p_elem_A );
        dague_private_memory_push( p_work, p_elem_B );
           )

     printlog("thread %d VP %d CORE_zgeqrt(%d)\n\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT.mb, p_elem_A, p_elem_B)\n",
     context->th_id, context->virtual_process->vp_id, k, k, k, A, k, k, B);

END


zunmqr(k,n)
  /* Execution space */
  k = 0..( ( descA.mt < descA.nt ) ? descA.mt-1 : descA.nt-1)
  n = k+1..descA.nt-1

  : A(k,n)

  /* A == A(k,k) */
  /* B == T(k,k) */
  /* C == A(k,k) */
  /* D == T(k,k) */
  /* E == A(k,n) */
  /* J == A(k,n1) */
  /* K == A(m,n1) */

  READ  C <- A zgeqrt_typechange(k)                              [type = LOWER_TILE]
  READ  D <- B zgeqrt(k)                                         [type = LITTLE_T]
  RW    E <- (0==k) ? A(k, n) : K ztsmqr(k-1, k, n)
          -> (descA.mt==(k+1)) ? A(k, n)
          -> (descA.mt>=(k+2)) ? J ztsmqr(k, k+1, n)

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s) && 0
    gpu_qr_mark_data_usage( 0, &descA, DAGUE_READ, k, k );
    gpu_qr_mark_data_usage( 0, &descA, DAGUE_READ | DAGUE_WRITE, k, n );
    gpu_qr_mark_data_usage( 1, &descT, DAGUE_READ, k, k );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

  void *p_elem_A = dague_private_memory_pop( p_work );

  DRYRUN(
         int tempkm = ((k)==((descA.mt)-1)) ? ((descA.m)-(k*(descA.mb))) : (descA.mb);
         int tempnn = ((n)==((descA.nt)-1)) ? ((descA.n)-(n*(descA.nb))) : (descA.nb);
         int ldak = BLKLDD( descA, k );

         CORE_zunmqr(PlasmaLeft, PlasmaConjTrans,
                     tempkm, tempnn, tempkm, ib,
                     C /* A(k,k) */, ldak,
                     D /* T(k,k) */, descT.mb,
                     E /* A(k,n) */, ldak,
                     p_elem_A, descT.nb );
         );
  dague_private_memory_push( p_work, p_elem_A );

  printlog("thread %d VP %d CORE_zunmqr(%d, %d)\n\t(PlasmaLeft, PlasmaConjTrans, tempkm, tempnn, tempkm, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT.mb, A(%d,%d)[%p], ldak, p_elem_A, descT.nb)\n",
  context->th_id, context->virtual_process->vp_id, k, n, k, k, C, k, k, D, k, n, E);

END


ztsqrt_out_Ak(k) [profile = off]
  k = 0..( (descA.mt <= descA.nt) ? descA.mt-2 : descA.nt-1 )

  : A(k, k)

  RW F <- F ztsqrt(k, descA.mt-1) [type = UPPER_TILE]
       -> A(k, k)                 [type = UPPER_TILE]
BODY
/* nothing */
END

ztsqrt(k,m)
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  m = k+1..descA.mt-1

  : A(m, k)

  /* A == A(k,k) */
  /* F == A(k,k) */
  /* G == A(m,k) */
  /* H == T(m,k) */
  /* K == A(m,n1) */
  /* L == A(m,k) */
  /* M == T(m,k) */

  RW    F <- ( m == (k+1) )   ? A zgeqrt(m-1) : F ztsqrt(k, m-1)        [type = UPPER_TILE]
          -> (descA.mt==(m+1)) ? F ztsqrt_out_Ak(k) : F ztsqrt(k, m+1)  [type = UPPER_TILE]
  RW    G <- (0==k) ? A(m, k) : K ztsmqr(k-1, m, k)
          -> A(m, k)
          -> (descA.nt-1 > k) ? L ztsmqr(k, m, (k+1)..(descA.nt-1))
  RW    H <- T(m, k)                                                  [type = LITTLE_T]
          -> T(m, k)                                                  [type = LITTLE_T]
          -> (descA.nt-1 > k) ? M ztsmqr(k, m, (k+1)..(descA.nt-1))   [type = LITTLE_T]
    /* Priority */
; (descA.mt-k)*(descA.mt-k)*(descA.mt-k)

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s) && 0
    gpu_qr_mark_data_usage( 0, &descA, DAGUE_READ | DAGUE_WRITE, k, k );
    gpu_qr_mark_data_usage( 0, &descA, DAGUE_READ | DAGUE_WRITE, m, k );
    gpu_qr_mark_data_usage( 1, &descT, DAGUE_READ | DAGUE_WRITE, m, k );
#endif  /* defined(HAVE_CUDA)  && defined(PRECISION_s) */

  void *p_elem_A = dague_private_memory_pop( p_tau  );
  void *p_elem_B = dague_private_memory_pop( p_work );

  DRYRUN(

         int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
         int tempkn = ((k)==((descA.nt)-1)) ? ((descA.n)-(k*(descA.nb))) : (descA.nb);
         int ldak = BLKLDD( descA, k );
         int ldam = BLKLDD( descA, m );

         CORE_ztsqrt(tempmm, tempkn, ib,
                     F /* A(k,k) */, ldak,
                     G /* A(m,k) */, ldam,
                     H /* T(m,k) */, descT.mb,
                     p_elem_A, p_elem_B );
         );
  dague_private_memory_push( p_tau , p_elem_A );
  dague_private_memory_push( p_work, p_elem_B );

  printlog("thread %d VP %d CORE_ztsqrt(%d, %d)\n\t(tempmm, tempkn, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT.mb, p_elem_A, p_elem_B)\n",
  context->th_id, context->virtual_process->vp_id, k, m, k, k, F, m, k, G, m, k, H);

END


ztsmqr_out_A1(k, n1) [profile = off]
  k = 0..( (descA.mt < descA.nt) ? descA.mt-2 : descA.nt-2 )
  n1 = k+1..descA.nt-1

  : A(k, n1)

  RW J <- J ztsmqr(k, descA.mt-1, n1)
       -> A(k, n1)
BODY
/* nothing */
END

ztsmqr(k,m,n1)
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  m = k+1..descA.mt-1
  n1 = k+1..descA.nt-1

  : A(m, n1)

  /* A == A(k,k) */
  /* E == A(k,n) */
  /* G == A(m,k) */
  /* H == T(m,k) */
  /* J == A(k,n1) */
  /* K == A(m,n1) */
  /* L == A(m,k) */
  /* M == T(m,k) */

  RW    J <- ( (k+1) == m ) ? E zunmqr(m-1, n1) : J ztsmqr(k, m-1, n1)
          -> ( m == (descA.mt-1) ) ? J ztsmqr_out_A1(k, n1) : J ztsmqr(k, m+1, n1)
  RW    K <- (0==k) ? A(m, n1) : K ztsmqr(k-1, m, n1)
          -> ( ((k+1) == n1) & ((k+1) == m)) ? A zgeqrt(n1)       /* Diagonal */
          -> ( ( m==(k+1)) & (n1 > m) ) ? E zunmqr(k+1, n1)       /* Next row */
          -> ( (n1==(k+1)) & (m > n1) ) ? G ztsqrt(n1, m)         /* Next column */
          -> ( (n1>(1+k)) & (m>(1+k)) ) ? K ztsmqr(k+1, m, n1)     /* trailing submatrix */
  READ  L <- G ztsqrt(k, m)
  READ  M <- H ztsqrt(k, m)   [type = LITTLE_T]

    /* Priority */
; (descA.mt-k)*(descA.mt-n1)*(descA.mt-n1)

BODY

  void *p_elem_A;

  DRYRUN(
         int tempnn = ((n1)==((descA.nt)-1)) ? ((descA.n)-(n1*(descA.nb))) : (descA.nb);
         int tempmm = ((m)==((descA.mt)-1)) ? ((descA.m)-(m*(descA.mb))) : (descA.mb);
         int ldak = BLKLDD( descA, k );
         int ldam = BLKLDD( descA, m );
         int ldwork = ib;
         );

#if defined(HAVE_CUDA) && defined(PRECISION_s) && 0
    gpu_qr_mark_data_usage( 0, &descA, DAGUE_READ, m, k );
    gpu_qr_mark_data_usage( 1, &descT, DAGUE_READ, m, k );
    if( dague_active_gpu() > 0 ) {
        int rc;

        if( 0 == (rc = gpu_stsmqr( context, this_task)) )
            goto FIN;
        if( -1 == rc ) {
            /* We're done, but the task has been already destroyed */
            return -1;
        }
        if( -2 == rc ) {
            /* The GPU failed to execute this task, but the task was already rescheduled */
            fprintf(stderr, "Unable to disable GPU at runtime. Fatal error.\n");
            exit(2);
        }
        /* Continue with the task on the cores */
    }
    gpu_qr_mark_data_usage( 0, &descA, DAGUE_READ | DAGUE_WRITE, k, n1 );
    gpu_qr_mark_data_usage( 0, &descA, DAGUE_READ | DAGUE_WRITE, m, n1 );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

  p_elem_A = dague_private_memory_pop( p_work );
  DRYRUN(
         CORE_ztsmqr(PlasmaLeft, PlasmaConjTrans,
                     descA.mb, tempnn, tempmm, tempnn, descA.nb, ib,
                     J /* A(k,n1) */, ldak,
                     K /* A(m,n1) */, ldam,
                     L /* A(m,k) */,  ldam,
                     M /* T(m,k) */,  descT.mb,
                     p_elem_A, ldwork );
         );
  dague_private_memory_push( p_work, p_elem_A );

  printlog("thread %d VP %d CORE_ztsmqr(%d, %d, %d)\n"
           "\t(PlasmaLeft, PlasmaConjTrans, descA.mb, tempnn, tempmm, tempnn, descA.nb, ib, \n"
           "\tA(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT.mb, p_elem_A, ldwork)\n",
           context->th_id, context->virtual_process->vp_id, k, m, n1,
           k, n1, J, m, n1, K,
           m, k,  L, m, k,  M);

#if defined(HAVE_CUDA) && defined(PRECISION_s) && 0
FIN:
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

END
