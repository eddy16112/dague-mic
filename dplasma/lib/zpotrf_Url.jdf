extern "C" %{
/*
 *  Copyright (c) 2010      
 * 
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"


#if defined(HAVE_CUDA) && defined(PRECISION_s)
#include "gpu_data.h"
#include "dplasma/cores/cuda_zgemm.h"
extern int *gpu_counter;
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */
%}

/* Globals
 */
PRI_CHANGE [type = int]
uplo       [type = PLASMA_enum]
descA      [type = "tiled_matrix_desc_t"]
A          [type = "dague_ddesc_t *"]
INFO       [type = "int*"]

/**************************************************
 *                      POTRF                     *
 **************************************************/
POTRF(k) [high_priority = on]

// Execution space
k = 0..descA.nt-1

// Parallel partitioning
:A(k, k)

// Parameters
RW T <- (k == 0) ? A(k, k) : T HERK(k-1, k)
     -> T TRSM(k, k+1..descA.nt-1)
     -> A(k, k)

; (k >= (descA.nt - PRI_CHANGE)) ? (descA.nt - k) * (descA.nt - k) * (descA.nt - k) : 1000000000
//; (k >= (descA.nt - PRI_CHANGE)) ? (descA.nt - k + 7) * (descA.nt - k + 2) * (descA.nt - k) / 6 : 0

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ | DAGUE_WRITE, k, k );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempkn = k == descA.nt-1 ? descA.n - k*descA.nb : descA.nb;
    int iinfo = 0;
    int ldak = BLKLDD( descA, k );

    DRYRUN(
        CORE_zpotrf(
            uplo, tempkn, T, ldak,
            &iinfo );
        if ( iinfo != 0 && *INFO == 0 )
            *INFO = k*descA.nb+iinfo; /* Should return here */
         );

    printlog(
             "thread %d CORE_zpotrf( %d )\n\t( %s, %d, A(%d,%d)[%p], %d) return info = %d\n",
             context->eu_id, k, 
             plasma_const(uplo), tempkn, k, k, T, ldak, iinfo );
END


/**************************************************
 *                      TRSM                      *
 **************************************************/
TRSM(k, n) [high_priority = on]

// Execution space
k = 0..descA.nt-2
n = k+1..descA.nt-1

// Parallel partitioning
: A(k, n)

// Parameters
READ  T <- T POTRF(k)
RW    C <- (k == 0) ? A(k, n) : C GEMM(k-1, k, n)
        -> A HERK(k, n)
        -> A GEMM(k, n, n+1..descA.nt-1)
        -> B GEMM(k, k+1..n-1, n )
        -> A(k, n)

; (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n) * (descA.nt - n) * (descA.nt - n) + 3 * ((2 * descA.nt) - k - n - 1) * (n - k) : 1000000000
//;  (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n - k) * ((descA.nt - n - k + 1) / 2 + 2) - 1 + (descA.nt - n + 2) * (descA.nt - n + 1) * (descA.nt - n) / 6 : 0

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ, k, k );
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ | DAGUE_WRITE, k, n );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempnn = n == descA.nt-1 ? descA.n - n * descA.nb : descA.nb;
    int ldak = BLKLDD( descA, k );

    DRYRUN(
        CORE_ztrsm(
            PlasmaLeft, PlasmaUpper, PlasmaConjTrans, PlasmaNonUnit,
            descA.mb, tempnn,
            (Dague_Complex64_t)1.0, T /*A(k, k)*/, ldak,
                                    C /*A(k, n)*/, ldak);
        );

    printlog("thread %d CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
             context->eu_id, k, n,
             plasma_const( PlasmaLeft ), plasma_const( PlasmaUpper ),
             plasma_const( PlasmaConjTrans ), plasma_const( PlasmaNonUnit ),
             descA.mb, tempnn,
             1.0, k, k, T, ldak,
                  k, n, C, ldak);

END


/**************************************************
 *                      HERK                      *
 **************************************************/
HERK(k, n) [high_priority = on]

// Execution space
k = 0..descA.nt-2
n = k+1..descA.nt-1

// Parallel partitioning
: A(n, n)

//Parameters
READ  A <- C TRSM(k, n)
RW    T <- (k == 0)   ? A(n, n)    : T HERK(k-1, n)
        -> (n == k+1) ? T POTRF(n) : T HERK(k+1, n)

; (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n) * (descA.nt - n) * (descA.nt - n) + 3 * (n - k) : 1000000000
//; (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n + 2) * (descA.nt - n + 1) * (descA.nt - n) / 6 + descA.nt - n + k + 1 : 0

BODY
#if defined(HAVE_CUDA) && defined(PRECISION_s)
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ, k, n );
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ | DAGUE_WRITE, n, n );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    int tempnn = n == descA.nt-1 ? descA.n - n*descA.nb : descA.nb;
    int ldak = BLKLDD( descA, k );
    int ldan = BLKLDD( descA, n );
    
    DRYRUN(
        CORE_zherk(
            PlasmaUpper, PlasmaConjTrans,
            tempnn, descA.mb,
            (double)-1.0, A /*A(k, n)*/, ldak,
            (double) 1.0, T /*A(n, n)*/, ldan);
        );
    printlog(
             "thread %d CORE_zherk( %d, %d )\n\t( %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             context->eu_id, k, n, 
             plasma_const( PlasmaUpper ), plasma_const( PlasmaConjTrans ),
             tempnn, descA.mb,
             -1.0, k, n, A, ldak,
              1.0, n, n, T, ldan);
END

/**************************************************
 *                      GEMM                      *
 **************************************************/
// Name
GEMM(k, m, n)

// Execution space
k = 0..descA.mt-3
m = k+1..descA.mt-1
n = m+1..descA.nt-1

// Parallel partitioning
: A(m, n)

// Parameters
READ  A <- C TRSM(k, m)
READ  B <- C TRSM(k, n)
RW    C <- (k == 0)   ? A(m, n)      : C GEMM(k-1, m, n)
        -> (m == k+1) ? C TRSM(m, n) : C GEMM(k+1, m, n)

; (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n) * (descA.nt - n) * (descA.nt - n) + 3 * ((2 * descA.nt) - n - m - 3) * (n - m) + 6 * (n - k) : 1000000000
//;  (n >= (descA.nt - PRI_CHANGE)) ? (descA.nt - n - m) * ((descA.nt - m - k + 1) / 2 + 2) - 1 + (descA.nt - n + 2) * (descA.nt - n + 1) * (descA.nt - n) / 6 + descA.nt - m + k + 1 : 0

BODY
    int tempnn = n == descA.nt-1 ? descA.n - n * descA.nb : descA.nb;
    int ldak = BLKLDD( descA, k );
    int ldan = BLKLDD( descA, n );

#if defined(HAVE_CUDA) && defined(PRECISION_s)
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ, k, m );
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ, k, n );
    if( dague_active_gpu() > 0 ) {
        int rc;

        if( 0 == (rc = gpu_zgemm( context, this_task, uplo )) )
            goto FIN;
        if( -1 == rc ) {
            /* We're done, but the task has been already destroyed */
            return -1;
        }
        if( -2 == rc ) {
            /* The GPU failed to execute this task, but the task was already rescheduled */
	    fprintf(stderr, "Unable to disable GPU at runtime. Fatal error.\n");
	    exit(2);
        }
        /* Continue with the task on the cores */
    }
    gpu_mark_data_usage( (tiled_matrix_desc_t*)__dague_object->super.A, DAGUE_READ | DAGUE_WRITE, m, n );
#endif  /* defined(HAVE_CUDA) && defined(PRECISION_s) */

    DRYRUN(
        CORE_zgemm( 
            PlasmaConjTrans, PlasmaNoTrans,
            descA.mb, tempnn, descA.nb,
            (Dague_Complex64_t)-1.0, A /*A(k, m)*/, ldak,
                                     B /*A(k, n)*/, ldak,
            (Dague_Complex64_t) 1.0, C /*A(m, n)*/, ldan);
        );
    printlog("thread %d CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %e, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %e, A(%d,%d)[%p], %d)\n",
             context->eu_id, k, m, n, 
             plasma_const( PlasmaConjTrans ),  plasma_const( PlasmaNoTrans ),
             descA.mb, tempnn, descA.nb,
             -1.0, k, m, A, ldak,
                   k, n, B, ldak,
              1.0, m, n, C, ldan);

#if defined(HAVE_CUDA) && defined(PRECISION_s)
FIN:
#endif
END
