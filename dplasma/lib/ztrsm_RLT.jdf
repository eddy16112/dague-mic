extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"

%}

side  [type = "PLASMA_enum"]
uplo  [type = "PLASMA_enum"]
trans [type = "PLASMA_enum"]
diag  [type = "PLASMA_enum"]
alpha [type = "Dague_Complex64_t"]
descA [type = "tiled_matrix_desc_t"]
A     [type = "dague_ddesc_t *"]
descB [type = "tiled_matrix_desc_t"]
B     [type = "dague_ddesc_t *"]


ztrsm(k,m)
  /* Execution space */
  k = 0..(descB.nt-1)
  m = 0..(descB.mt-1)

  : B(m,k)

  READ  A <- A ztrsm_in_A0(k,m)

  RW    B <- (0==k) ? B(m,k)
          <- (k>=1) ? E zgemm(k-1, m, k)
          -> (descB.nt>=(k+2)) ? C zgemm(k, m, (k+1)..(descB.nt-1))
          -> B(m,k)

BODY

  int tempmm = ((m)==(descB.mt-1)) ? (descB.m-(m*descB.mb)) : descB.mb;
  int tempkn = ((k)==(descB.nt-1)) ? (descB.n-(k*descB.nb)) : descB.nb;
  int lda = BLKLDD( descA, k );
  int ldb = BLKLDD( descB, m );

  DRYRUN(
    CORE_ztrsm(side, uplo, trans, diag,
               tempmm, tempkn, alpha,
               A /* A(k,k) */, lda,
               B /* B(m,k) */, ldb );
         );

  printlog("thread %d CORE_ztrsm(%d, %d)\n"
           "\t(side, uplo, trans, diag, tempmm, tempkn, alpha, A(%d,%d)[%p], lda, B(%d,%d)[%p], ldb)\n",
           context->eu_id, k, m, k, k, A, m, k, B);

END

/*
 * Pseudo-task
 */
ztrsm_in_A0(k,m)
  k = 0..(descB.nt-1)
  m = 0..(descB.mt-1)

  : A(k,k)

  RW A <- A(k,k)
       -> A ztrsm(k,m)
BODY
/* nothing */
END



zgemm(k,m,n)
  /* Execution space */
  k = 0..(descB.nt-2)
  m = 0..(descB.mt-1)
  n = (k+1)..(descB.nt-1)

  : B(m,n)

  READ  C <- B ztrsm(k, m) 
  READ  D <- D zgemm_in_A0(k,m,n)

  RW    E <- (0==k) ? B(m,n)
          <- (k>=1) ? E zgemm(k-1, m, n) 
          -> ((1+k)==n) ? B ztrsm(n, m) 
          -> (n>=(2+k)) ? E zgemm(k+1, m, n) 

BODY

  int tempmm = ((m)==(descB.mt-1)) ? (descB.m-(m*descB.mb)) : descB.mb;
  int tempnn = ((n)==(descB.nt-1)) ? (descB.n-(n*descB.nb)) : descB.nb;
  Dague_Complex64_t minvalpha = ((Dague_Complex64_t)-1.000000)/alpha;
  int ldb = BLKLDD( descB, m );
  int ldan = BLKLDD( descA, n );

  DRYRUN(
      CORE_zgemm(PlasmaNoTrans, trans,
                 tempmm, tempnn, descB.mb,
                 minvalpha, C /* B(m,k) */, ldb,
                            D /* A(n,k) */, ldan,
                 1.0,       E /* B(m,n) */, ldb );
         );

  printlog("thread %d CORE_zgemm(%d, %d, %d)\n"
           "\t(PlasmaNoTrans, trans, tempmm, tempnn, descB.mb, minvalpha, B(%d,%d)[%p], ldb, A(%d,%d)[%p], ldan, zone, B(%d,%d)[%p], ldb)\n",
           context->eu_id, k, m, n, m, k, C, n, k, D, m, n, E);

END

/*
 * Pseudo-task
 */
zgemm_in_A0(k,m,n)
  k = 0..(descB.nt-2)
  m = 0..(descB.mt-1)
  n = (k+1)..(descB.nt-1)

  : A(n,k)

  RW D <- A(n,k)
       -> D zgemm(k,m,n)
BODY
/* nothing */
END

