extern "C" %{
/*
 *  Copyright (c) 2010      
 * 
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "dplasma/lib/dplasmajdf.h"
%}

/*
 * Globals
 */
transA [type = int]
transB [type = int]

alpha  [type = Dague_Complex64_t]
beta   [type = Dague_Complex64_t]

Am   [type = int]
An   [type = int]
Amb  [type = int]
Anb  [type = int]
Amt  [type = int]
Ant  [type = int]

Bm   [type = int]
Bn   [type = int]
Bmb  [type = int]
Bnb  [type = int]
Bmt  [type = int]
Bnt  [type = int]

Cm   [type = int]
Cn   [type = int]
Cmb  [type = int]
Cnb  [type = int]
Cmt  [type = int]
Cnt  [type = int]

/* A(k, m)^t * B(K, N) = C(M, N) */
/**************************************************
 *                       READ_A                   *
 **************************************************/
READ_A(k, m)  [profile = off]

k = 0 .. Amt-1
m = 0 .. Ant-1

: A(k, m)

A <- A(k, m)
  -> A GEMM(m, 0, k)
BODY
    printlog("A( %d, %d) / B (%d, %d) / C( %d, %d)\n", Amt, Ant, Bmt, Bnt, Cmt, Cnt);
    printlog("rank %u <- A(%d,%d)\n", __dague_object->super.A->myrank, k, m);
END

/**************************************************
 *                       READ_B                   *
 **************************************************/
READ_B(k, n)  [profile = off]

k = 0 .. Bmt-1
n = 0 .. Bnt-1

: B(k, n)

B <- B(k, n)
  -> B GEMM(0, n, k)
BODY
     printlog("rank %u <- B(%d,%d)\n", __dague_object->super.B->myrank, k, n);
END

/**************************************************
 *                       GEMM                     *
 **************************************************/
GEMM(m, n, k)

// Execution space
m = 0 .. Cmt-1
n = 0 .. Cnt-1
k = 0 .. Amt-1

// Parallel partitioning
: C(m, n)

// Parameters
READ A <- (n == 0)       ? A READ_A(k, m) : A GEMM( m, (n+Cnt-1) % Cnt, k )
       -> (n <= (Cnt-2)) ? A GEMM( m, (n+1) % Cnt, k )
READ B <- (m == 0)       ? B READ_B(k, n) : B GEMM( (m+Cmt-1) % Cmt, n, k )
       -> (m <= (Cmt-2)) ? B GEMM( (m+1) % Cmt, n, k )
RW   C <- (k == 0)       ? C(m, n) : C GEMM( m, n, k-1 )
       -> (k == (Amt-1)) ? C(m, n) : C GEMM( m, n, k+1 )
BODY
        Dague_Complex64_t lbeta = (k == 0) ? beta : (Dague_Complex64_t)1.0;
        int tempmm = m == Cmt-1 ? Cm - m * Cmb : Cmb;
        int tempnn = n == Cnt-1 ? Cn - n * Cnb : Cnb;
        int tempkk = k == Amt-1 ? Am - k * Amb : Amb;
        DRYRUN(
            CORE_zgemm(
                transA, transB,
                tempmm, tempnn, tempkk,
                alpha, A /*A(k, m)*/, Amb,
                       B /*B(k, n)*/, Bmb,
                lbeta, C /*C(m, n)*/, Cmb);
            );

        printlog("thread %d gemm( %d, %d, %d )\n"
                 "    ( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d,%d), %d, %f, C(%d,%d), %d)\n",
                 context->eu_id, m, n, k,
                 plasma_const( transA ), plasma_const( transB ), 
                 tempmm, tempnn, tempkk,
                 creal(alpha), k, m, Amb,
                               k, n, Bmb,
                 creal(lbeta), m, n, Cmb );
END

extern "C" %{

%}
