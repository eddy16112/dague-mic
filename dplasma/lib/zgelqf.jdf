extern "C" %{
/*
 *  Copyright (c) 2010
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"

%}

descA  [type = "tiled_matrix_desc_t"]
A      [type = "dague_ddesc_t *"]
descT  [type = "tiled_matrix_desc_t"]
T      [type = "dague_ddesc_t *" aligned=A]
ib     [type = "int"]
p_work [type = "dague_memory_pool_t *" size = "(sizeof(Dague_Complex64_t)*ib*descT.nb)"]
p_tau  [type = "dague_memory_pool_t *" size = "(sizeof(Dague_Complex64_t)   *descT.nb)"]


zgelqt_typechange(k)
  /* Execution space */
  k = 0..( (descA.mt-1 < descA.nt-1)? descA.mt-1 : descA.nt-1 )

  : A(k,k)

RW A <- A zgelqt(k)
     -> (descA.mt>=(2+k)) ? C zunmlq(k, (k+1)..(descA.mt-1)) [type = UPPER_TILE]
     -> A(k, k)                                              [type = UPPER_TILE]

BODY
 /* Nothing */
END

zgelqt(k)
  /* Execution space */
  k = 0..inline_c %{ return dague_imin((descA.nt-1),(descA.mt-1)); %}

  : A(k,k)

  /* A == A(k,k) */
  /* B == T(k,k) */
  /* C == A(k,k) */
  /* D == T(k,k) */
  /* F == A(k,k) */
  /* K == A(m1,n) */

  RW    A <- (0==k) ? A(k,k) : K ztsmlq(k-1, k, k)
          -> (descA.nt==(k+1)) ? A(k,k)            [type = LOWER_TILE]
          -> (descA.nt>=(2+k)) ? F ztslqt(k, k+1)  [type = LOWER_TILE]
          -> A zgelqt_typechange(k)
  RW    B <- T(k, k)                                              [type = LITTLE_T]
          -> T(k, k)                                              [type = LITTLE_T]
          -> (descA.mt>=(k+2)) ? D zunmlq(k, (k+1)..(descA.mt-1)) [type = LITTLE_T]


BODY

  int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
  int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );

  DRYRUN(
         void *p_elem_A = dague_private_memory_pop( p_tau );
         void *p_elem_B = dague_private_memory_pop( p_work );

         CORE_zgelqt(tempkm, tempkn, ib,
                     A /* A(k,k) */, ldak,
                     B /* T(k,k) */, descT.mb,
                     p_elem_A, p_elem_B );

         dague_private_memory_push( p_tau, p_elem_A );
         dague_private_memory_push( p_work, p_elem_B );
         );

  printlog("CORE_zgelqt(%d)\n"
           "\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT.mb, p_elem_A, p_elem_B)\n",
           k, k, k, A, k, k, B);
END

zunmlq(k,m)
  /* Execution space */
  k = 0..inline_c %{ return dague_imin((descA.nt-1),(descA.mt-2)); %}
  m = (k+1)..(descA.mt-1)

  : A(m,k)

  /* A == A(k,k) */
  /* B == T(k,k) */
  /* C == A(k,k) */
  /* D == T(k,k) */
  /* E == A(m,k) */
  /* J == A(m1,k) */
  /* K == A(m1,n) */

  READ  C <- A zgelqt_typechange(k) [type = UPPER_TILE]
  READ  D <- B zgelqt(k)            [type = LITTLE_T]
  RW    E <- (0==k) ? A(m,k) : K ztsmlq(k-1, k-1+1, m)
          -> (descA.nt==(1+k)) ? A(m,k)
          -> (descA.nt>=(k+2)) ? J ztsmlq(k, k+1, m)

BODY

  int tempmm = ((m)==(descA.mt-1)) ? (descA.m-(m*descA.mb)) : descA.mb;
  int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );
  int ldam = BLKLDD( descA, m );

  DRYRUN(
         void *p_elem_A = dague_private_memory_pop( p_work );

         CORE_zunmlq(PlasmaRight, PlasmaConjTrans, tempmm,
                     tempkn, tempkn, ib,
                     C /* A(k,k) */, ldak,
                     D /* T(k,k) */, descT.mb,
                     E /* A(m,k) */, ldam,
                     p_elem_A, descT.nb );

         dague_private_memory_push( p_work, p_elem_A );
         );


  printlog("CORE_zunmlq(%d, %d)\n"
           "\t(PlasmaRight, PlasmaConjTrans, tempmm, tempkn, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT.mb, A(%d,%d)[%p], ldam, p_elem_A, descT.nb)\n",
  k, m, k, k, C, k, k, D, m, k, E);

END


ztslqt(k,n)
  /* Execution space */
  k = 0..inline_c %{ return dague_imin((descA.nt-2),(descA.mt-1)); %}
  n = (k+1)..(descA.nt-1)

  : A(k,n)

  /* A == A(k,k) */
  /* F == A(k,k) */
  /* G == A(k,n) */
  /* H == T(k,n) */
  /* K == A(m1,n) */
  /* L == A(k,n) */
  /* M == T(k,n) */

  RW    F <- ( (k+1) == n ) ? A zgelqt(n-1) : F ztslqt(k, n-1)         [type = LOWER_TILE]
          -> (descA.nt==(1+n)) ? F ztslqt_out_A0(k) : F ztslqt(k, n+1) [type = LOWER_TILE]
  RW    G <- (0==k) ? A(k,n) : K ztsmlq(k-1, n, k)
          -> (descA.mt>=(2+k)) ? L ztsmlq(k, n, (k+1)..(descA.mt-1))
          -> A(k,n)
  RW    H <- T(k, n)                                                 [type = LITTLE_T]
          -> T(k, n)                                                 [type = LITTLE_T]
          -> (descA.mt>=(2+k)) ? M ztsmlq(k, n, (k+1)..(descA.mt-1)) [type = LITTLE_T]

BODY

  int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
  int tempnn = ((n)==(descA.nt-1)) ? (descA.n-(n*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );

  DRYRUN(
         void *p_elem_A = dague_private_memory_pop( p_tau );
         void *p_elem_B = dague_private_memory_pop( p_work );

         CORE_ztslqt(tempkm, tempnn, ib,
                     F /* A(k,k) */, ldak,
                     G /* A(k,n) */, ldak,
                     H /* T(k,n) */, descT.mb,
                     p_elem_A, p_elem_B );
         dague_private_memory_push( p_tau, p_elem_A );
         dague_private_memory_push( p_work, p_elem_B );
         );

  printlog("CORE_ztslqt(%d, %d)\n"
           "\t(tempkm, tempnn, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT.mb, p_elem_A, p_elem_B)\n",
  k, n, k, k, F, k, n, G, k, n, H);

END

/*
 * Pseudo-task
 */
ztslqt_out_A0(k) [profile = off]
  k = 0..inline_c %{ return dague_imin((descA.nt-2),(descA.mt-1)); %}

  : A(k,k)

  RW F <- F ztslqt(k,descA.nt-1) [type = LOWER_TILE]
        -> A(k,k)                [type = LOWER_TILE]
BODY
/* nothing */
END


ztsmlq(k,n,m1)
  /* Execution space */
  k = 0..inline_c %{ return dague_imin((descA.nt-2),(descA.mt-2)); %}
  n = (k+1)..(descA.nt-1)
  m1 = (k+1)..(descA.mt-1)

  : A(m1,n)

  /* A == A(k,k) */
  /* E == A(m,k) */
  /* G == A(k,n) */
  /* H == T(k,n) */
  /* J == A(m1,k) */
  /* K == A(m1,n) */
  /* L == A(k,n) */
  /* M == T(k,n) */

  RW    J <- (n>=(k+2)) ? J ztsmlq(k, n-1, m1)
          <- ((1+k)==n) & (m1>=(k+1)) & (descA.mt>=(1+k)) ? E zunmlq(n-1, m1)
          -> (descA.nt==(1+n)) ? J ztsmlq_out_A0(k,m1)

          -> (descA.nt>=(n+2)) ? J ztsmlq(k, n+1, m1)
  RW    K <- (k>=1) ? K ztsmlq(k-1, n, m1)
          <- (0==k) ? A(m1,n)
          -> (m1>=(k+2)) & (n>=(2+k)) ? K ztsmlq(k+1, n, m1)
          -> (n==(k+1)) & (m1>=(n+1)) ? E zunmlq(k+1, m1)
          -> ((k+1)==m1) & ((k+1)==n) & (descA.nt>=(k+2)) ? A zgelqt(m1)
          -> ((k+1)==m1) & (descA.nt>=(k+2)) & (n>=(k+2)) ? G ztslqt(m1, n)
  READ  L <- G ztslqt(k, n)
  READ  M <- H ztslqt(k, n) [type = LITTLE_T]

BODY

  int tempmm = ((m1)==(descA.mt-1)) ? (descA.m-(m1*descA.mb)) : descA.mb;
  int tempnn = ((n)==(descA.nt-1)) ? (descA.n-(n*descA.nb)) : descA.nb;
  int ldam = BLKLDD( descA, m1 );
  int ldak = BLKLDD( descA, k );
  int ldwork = ((PlasmaRight)==(PlasmaLeft)) ? (ib) : descT.nb;

  DRYRUN(
         void *p_elem_A = dague_private_memory_pop( p_work );

         CORE_ztsmlq(PlasmaRight, PlasmaConjTrans, tempmm,
                     descA.nb, tempmm, tempnn, descA.mb, ib,
                     J /* A(m1,k) */, ldam,
                     K /* A(m1,n) */, ldam,
                     L /* A(k, n) */, ldak,
                     M /* T(k, n) */, descT.mb,
                     p_elem_A, ldwork );

         dague_private_memory_push( p_work, p_elem_A );
         );

  printlog("CORE_ztsmlq(%d, %d, %d)\n"
           "\t(PlasmaRight, PlasmaConjTrans, tempmm, descA.nb, tempmm, tempnn, descA.mb, ib, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT.mb, p_elem_A, ldwork)\n",
           k, n, m1, m1, k, J, m1, n, K, k, n, L, k, n, M);

END

/*
 * Pseudo-task
 */
ztsmlq_out_A0(k,m1) [profile = off]
  k = 0..inline_c %{ return dague_imin((descA.nt-2),(descA.mt-2)); %}
  m1 = (k+1)..(descA.mt-1)

  : A(m1,k)

  RW J <- J ztsmlq(k,descA.nt-1,m1)
        -> A(m1,k)
BODY
/* nothing */
END

