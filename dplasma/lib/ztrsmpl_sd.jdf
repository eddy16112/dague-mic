extern "C" %{
/*
 *  Copyright (c) 2010      
 * 
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"

#define getIPIV(__ptr) ((int*)(__ptr))
#define getL(__ptr)    ((Dague_Complex64_t*)(__ptr) + descL.nb)

%}

/** Globals */
descA     [type = "tiled_matrix_desc_t"]
A         [type = "dague_ddesc_t *"]
descL     [type = "tiled_matrix_desc_t"]
Lipiv     [type = "dague_ddesc_t *" aligned=A]
descB     [type = "tiled_matrix_desc_t"]
B         [type = "dague_ddesc_t *"]
ib        [type = int]

/**************************************************
 *                      ZGESSM                    *
 **************************************************/
zgessm_inAIPIV(k) [profile = off]
k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )

:A(k, k)

READ A    <- A(k, k)
          -> B zgessm(k, 0..descB.nt-1) 
     IPIV <- Lipiv(k, k)                              [type = PIVOT]
          -> A zgessm(k, 0..descB.nt-1)               [type = PIVOT]
     
BODY
        /* Nothing */
        printlog("thread %d VP %d zgessm_inAIPIV( %d )\n", 
                 context->th_id, context->virtual_process->vp_id, k);
END

zgessm(k,n)
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  n = 0..descB.nt-1

  /* A == IPIV(k,k) */
  /* B == A(k,k) */
  /* C == B(k,n) */
  /* D == B(k,n1) */
  /* E == B(m,n1) */

:B(k, n)

  READ  A <- IPIV zgessm_inAIPIV(k)                     [type = PIVOT]
  READ  B <- A    zgessm_inAIPIV(k)
  RW    C <- (k == 0) ? B(k,n) : E zssssm(k-1, k, n) 
          -> (descA.mt>=(k+2)) ? D zssssm(k, k+1, n) 
          -> (descA.mt==(k+1)) ? B(k,n)

BODY

   int tempkm   = ( k == (descA.mt-1) ) ? descA.m - k * descA.mb : descA.mb;
   int tempnn   = ( n == (descB.nt-1) ) ? descB.n - n * descB.nb : descB.nb;
   int tempkmin;

   if ( descA.mt < descA.nt ) {
     tempkmin = (k == descA.mt-1) ? descA.m - k * descA.mb : descA.mb;
   } else {
     tempkmin = (k == descA.nt-1) ? descA.n - k * descA.mb : descA.mb;
   }
   DRYRUN(
          int ldak = descA.mb; /*((k+(Ai/descA.mb))<Alm1) ? (descA.mb) : (Alm%descA.mb);*/
          int ldbk = descB.mb; /*((k+(Bi/descB.mb))<Blm1) ? (descB.mb) : (Blm%descB.mb);*/

	   CORE_zgessm(tempkm, tempnn, tempkmin, ib, 
                       getIPIV(A) /* IPIV(k,k) */, 
                       B /* A(k,k) */, ldak, 
                       C /* B(k,n) */, ldbk );
          );

   printlog("thread %d VP %d   CORE_zgessm(%d, %d)\n\t(%d, %d, %d, %d, IPIV(%d,%d)[%p], A(%d,%d)[%p], ldak, B(%d,%d)[%p], ldbk)\n",
            context->th_id, context->virtual_process->vp_id, tempkm, tempnn, tempkmin, ib, k, n, k, k, A, k, k, B, k, n, C);

END

/**************************************************
 *                      ZSSSSM                    *
 **************************************************/
zssssm_inALIPIV(k, m) [profile = off]
k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
m = k+1..descA.mt-1

:A(m, k)

READ A    <- A(m, k)
          -> G zssssm(k, m, 0..descB.nt-1) 
     L    <- Lipiv(m, k)                             [type = L_PIVOT]
          -> F zssssm(k, m, 0..descB.nt-1)           [type = L_PIVOT]

BODY
        /* Nothing */
        printlog("thread %d VP %d zssssm_inALIPIV( %d, %d )\n", 
                 context->th_id, context->virtual_process->vp_id, k, m);
END

zssssm_outB(k, n1) [profile = off]
k = 0..( (descA.mt <= descA.nt) ? descA.mt-2 : descA.nt-1 )
n1 = 0..descB.nt-1

:B(k, n1)

     READ B <- D zssssm(k, descA.mt-1, n1)
            -> B(k, n1)
BODY
        /* Nothing */
        printlog("thread %d VP %d zssssm_outB( %d, %d )\n", 
                 context->th_id, context->virtual_process->vp_id, k, n1);
END

zssssm(k,m,n1)
  /* Execution space */
  k = 0..( (descA.mt < descA.nt) ? descA.mt-1 : descA.nt-1 )
  m = k+1..descA.mt-1
  n1 = 0..descB.nt-1

  /* C == B(k,n) */
  /* D == B(k,n1) */
  /* E == B(m,n1) */
  /* F == L(m,k) */
  /* G == A(m,k) */
  /* H == IPIV(m,k) */

:B(m, n1)

  RW    D <- ( m == (1+k) ) ? C zgessm(m-1, n1) : D zssssm(k, m-1, n1)
          -> (descA.mt==(m+1)) ? B zssssm_outB(k, n1)
          -> (descA.mt>=(m+2)) ? D zssssm(k, m+1, n1) 
  RW    E <- (0==k) ? B(m,n1) : E zssssm(k-1, m, n1) 
          -> (m>=(k+2)) & (descA.nt>=(k+2)) ? E zssssm(k+1, m, n1) 
          -> (descA.nt==(k+1)) ? B(m,n1)
          -> ((1+k)==m) & (descA.nt>=(2+k)) ? C zgessm(m, n1) 
  READ  G <- A zssssm_inALIPIV(k, m)         
  READ  F <- L zssssm_inALIPIV(k, m)         [type = L_PIVOT]

  /*

  */

BODY

  int tempmm = ((m) ==(descA.mt-1)) ? (descA.m -( m*descA.mb)) : (descA.mb);
  int tempnn = ((n1)==(descB.nt-1)) ? (descB.n -(n1*descB.nb)) : (descB.nb);
  int tempkn = ((k) ==(descA.nt-1)) ? (descA.n -( k*descA.nb)) : (descA.nb);
  int ldbk   = descB.mb; /*((k+(Bi/descB.mb))<Blm1) ? (descB.mb) : (Blm%descB.mb);*/
  int ldbm   = descB.mb; /*((m+(Bi/descB.mb))<Blm1) ? (descB.mb) : (Blm%descB.mb);*/
  int ldam   = descA.mb; /*((m+(Ai/descA.mb))<Alm1) ? (descA.mb) : (Alm%descA.mb);*/

  DRYRUN(
         CORE_zssssm(descA.nb, tempnn, tempmm, 
                     tempnn, tempkn, ib, 
                     D          /* B(k,n1) */, ldbk, 
                     E          /* B(m,n1) */, ldbm, 
                     getL(F)    /* L(m,k)  */, descL.mb-1, 
                     G          /* A(m,k)  */, ldam, 
                     getIPIV(F) /* IPIV(m,k) */ );
         );
  printlog("thread %d VP %d   CORE_zssssm(%d, %d, %d)\n"
           "\t(%d, %d, %d, %d, %d, %d, B(%d,%d)[%p], %d, B(%d,%d)[%p], %d, \n"
           "\tL(%d,%d)[%p], %d, A(%d,%d)[%p], %d, IPIV(%d,%d)[%p])\n",
           context->th_id, context->virtual_process->vp_id, descA.nb, tempnn, tempmm, tempnn, tempkn, ib, k, m, n1, 
           k, n1, D, ldbk, m, n1, E, ldbm, 
           m, k, getL(F), descL.mb, m, k, G, ldam, 
           m, k, getIPIV(F));

END
