extern "C" %{
/*
 *  Copyright (c) 2010      
 * 
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#define PRECISION_z

#include <plasma.h>
#include <core_blas.h>

#include "dague.h"
#include "data_distribution.h"
#include "data_dist/matrix/precision.h"
#include "data_dist/matrix/matrix.h"
#include "dplasma/lib/memory_pool.h"
#include "dplasma/lib/dplasmajdf.h"


static Dague_Complex64_t zone = 1.;

%}

side  [type = "PLASMA_enum"]
uplo  [type = "PLASMA_enum"]
trans [type = "PLASMA_enum"]
diag  [type = "PLASMA_enum"]
alpha [type = "Dague_Complex64_t"]
descA [type = "tiled_matrix_desc_t"]
A     [type = "dague_ddesc_t *"]
descB [type = "tiled_matrix_desc_t"]
B     [type = "dague_ddesc_t *"]


ztrsm(k,n)
  /* Execution space */
  k = 0..(descB.mt-1)
  n = 0..(descB.nt-1)

  : B(k,n)

  /* A == A(k,k) */
  /* B == B(k,n) */
  /* D == B(k,n1) */
  /* E == B(m,n1) */

  READ  A <- A ztrsm_in_A0(k,n)

  RW    B <- (k>=1) ? E zgemm(k-1, k, n) 
          <- (0==k) ? B(k,n)
          -> B(k,n)
          -> (descB.mt>=(k+2)) ? D zgemm(k, (k+1)..(descB.mt-1), n) 

  /*
  The following is a superset of the necessary anti-dependencies:
  ANTI edge from ztrsm:B(k,n) to ztrsm:B(k,n) {[k,n] -> [k,n] : 0 <= k < descB.mt && 0 <= n < descB.nt}

  */

BODY

  int tempkm = ((k)==(descB.mt-1)) ? (descB.m-(k*descB.mb)) : descB.mb;
  int tempnn = ((n)==(descB.nt-1)) ? (descB.n-(n*descB.nb)) : descB.nb;
  Dague_Complex64_t lalpha = ((k)==(0)) ? (alpha) : (zone);
  int lda = BLKLDD( descA, k );
  int ldb = BLKLDD( descB, k );

  CORE_ztrsm(side, uplo, trans, 
	diag, tempkm, tempnn, 
	lalpha, A /* A(k,k) */, lda, 
	B /* B(k,n) */, ldb );
  printlog("thread %d CORE_ztrsm(%d, %d)\n"
           "\t(side, uplo, trans, diag, tempkm, tempnn, lalpha, A(%d,%d)[%p], lda, B(%d,%d)[%p], ldb)\n",
  context->eu_id, k, n, k, k, A, k, n, B);

END

/*
 * Pseudo-task
 */
ztrsm_in_A0(k,n)
  k = 0..(descB.mt-1)
  n = 0..(descB.nt-1)

  : A(k,k)

  RW A <- A(k,k)
       -> A ztrsm(k,n)
BODY
/* nothing */
END



zgemm(k,m,n1)
  /* Execution space */
  k = 0..(descB.mt-2)
  m = (k+1)..(descB.mt-1)
  n1 = 0..(descB.nt-1)

  : B(m,n1)

  /* B == B(k,n) */
  /* C == A(m,k) */
  /* D == B(k,n1) */
  /* E == B(m,n1) */

  READ  C <- C zgemm_in_A0(k,m,n1)

  READ  D <- B ztrsm(k, n1) 
  RW    E <- (k>=1) ? E zgemm(k-1, m, n1) 
          <- (0==k) ? B(m,n1)
          -> (m>=(k+2)) ? E zgemm(k+1, m, n1) 
          -> ((k+1)==m) ? B ztrsm(m, n1) 

  /*
  The following is a superset of the necessary anti-dependencies:
  ANTI edge from zgemm:B(m,n1) to ztrsm:B(k,n) {[k,m,n1] -> [m,n1] : 0 <= k < m < descB.mt && 0 <= n1 < descB.nt}
  ANTI edge from zgemm:B(m,n1) to zgemm:B(m,n1) {[k,m,n1] -> [k,m,n1] : 0 <= k < m < descB.mt && 0 <= n1 < descB.nt} union
 {[k,m,n1] -> [k',m,n1] : 0 <= k < k' < m < descB.mt && 0 <= n1 < descB.nt}

  */

BODY

  int tempmm = ((m)==(descB.mt-1)) ? (descB.m-(m*descB.mb)) : descB.mb;
  int tempnn = ((n1)==(descB.nt-1)) ? (descB.n-(n1*descB.nb)) : descB.nb;
  Dague_Complex64_t mzone = (Dague_Complex64_t)-1.000000;
  int lda = BLKLDD( descA, m );
  Dague_Complex64_t lalpha = ((k)==(0)) ? (alpha) : (zone);
  int ldb = BLKLDD( descB, m );

  CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans, tempmm, 
	tempnn, descB.mb, mzone, 
	C /* A(m,k) */, lda, D /* B(k,n1) */, 
	descB.mb, lalpha, E /* B(m,n1) */, 
	ldb );
  printlog("thread %d CORE_zgemm(%d, %d, %d)\n"
           "\t(PlasmaNoTrans, PlasmaNoTrans, tempmm, tempnn, descB.mb, mzone, A(%d,%d)[%p], lda, B(%d,%d)[%p], descB.mb, lalpha, B(%d,%d)[%p], ldb)\n",
  context->eu_id, k, m, n1, m, k, C, k, n1, D, m, n1, E);

END

/*
 * Pseudo-task
 */
zgemm_in_A0(k,m,n1)
  k = 0..(descB.mt-2)
  m = (k+1)..(descB.mt-1)
  n1 = 0..(descB.nt-1)

  : A(m,k)

  RW C <- A(m,k)
       -> C zgemm(k,m,n1)
BODY
/* nothing */
END

