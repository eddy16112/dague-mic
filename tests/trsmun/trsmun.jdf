extern "C" %{
   /**
    * PLASMA include for defined and constants.
    */
#include <plasma.h>
#include <core_dblas.h>

#include "dplasma.h"
#include <stdlib.h>
#include <stdio.h>

int PLASMA_INFO = 0;

#include "data_management.h"
extern DPLASMA_desc ddescA;
extern DPLASMA_desc ddescB;

#ifdef DISTRIBUTED
#include <mpi.h>
extern MPI_Datatype TILE, VECTOR;

#define A(k,l) dplasma_get_local_tile_s(&ddescA, k, l)
#define B(l)   dplasma_get_local_tile_s(&ddescL, l)

#else
#define A(k,l) &(((double*)ddescA.mat)[ddescA.bsiz*(k)+ddescA.bsiz*ddescA.lmt*(l)])
#define B(l)   &(((double*)ddescB.mat)[ddescB.bsiz*(l)])
#endif

#ifdef DPLASMA_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DPLASMA_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) CORE_##FN ARGS
#endif
%}

/** Globals */
NT
NB
GRIDrows
GRIDcols
rowRANK
colRANK

/*************************************************************************
 *                             TRSM                                      *
 *************************************************************************/

TRSM(k)

  k = 0 .. NT-1

  // Parallel partitioning
  : k % GRIDrows == rowRANK
  : k % GRIDcols == colRANK

  IN    A <- A(k,k)                               [TILE]
  INOUT B <- (k == NT-1) ? B(k) : C GEMM(k, k+1)  [VECTOR]
          -> B GEMM(k, 0 .. k)                    [VECTOR]
          -> B(k)

BODY
    CORE(
        dtrsm, (
            PlasmaRight, PlasmaUpper, PlasmaNoTrans, PlasmaNonUnit,
            NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
            1,  /* B is a vector */
            1.0, A /*A(k, k)*/, NB, /*A.nb,*/
                 B /*B(k)*/,    NB /*B.nb*/ )
        );
    OUTPUT(( 
        "CORE_dtrsm( %s, %s, %s, %s, %d, %d, %f, A(%d,%d), %d, B(%d), %d)\n",
            "PlasmaRight", "PlasmaUpper", "PlasmaNoTrans", "PlasmaNonUnit",
            NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
            1,  /* B is a vector */
            1.0, k, k, NB, /*A.nb,*/
                    k, NB /*A.nb*/ )
        );

END

/****************************************************************************
 *                                TRSM                                      *
 ****************************************************************************/

GEMM(k, l)

  k = 0 .. NT-1
  l = 0 .. k-1

  :k % GRIDrows == rowRANK
  :l % GRIDcols == colRANK

  IN    A <- A(k,l)                                     [TILE]
  IN    B <- B TRSM(k)                                  [VECTOR]
  INOUT C <- (k == NT-1) ? B(k) : C GEMM(k+1, l)        [VECTOR]
          -> (l == k-1) ? B TRSM(k-1) : C GEMM(k-1, l)  [VECTOR]

BODY
    CORE(
        dgemm, ( 
            PlasmaNoTrans, PlasmaNoTrans,
            NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
            1,  /* B and C are vectors */
            NB, /*A.nb,*/
            -1.0, A /*A(k, l)*/, NB, /*A.nb,*/
                  B /*B(l)*/,    NB, /*A.nb,*/
             1.0, C /*B(k)*/,    NB /*A.nb*/ )
        );
    OUTPUT((
        "CORE_dgemm( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d), %d, %f, B(%d), %d)\n",
            "PlasmaNoTrans", "PlasmaNoTrans",
            NB, /*m == A.nt-1 ? A.n-m*A.nb : A.nb,*/
            1,  /* B and C are vectors */
            NB, /*A.nb,*/
            -1.0, k, l, NB, /*A.nb,*/
                     l, NB, /*A.nb,*/
             1.0,    k, NB /*A.nb*/ )
        );
END

