extern "C" %{

#include "data_dist/data_distribution.h"
#include "data_dist/matrix/matrix.h"

#include "dague.h"
#include "remote_dep.h"



#ifdef DAGUE_CALL_TRACE
#   include <stdlib.h>
#   include <stdio.h>
#   define OUTPUT(ARG)  printf ARG
#else
#   define OUTPUT(ARG)
#endif

#ifdef DAGUE_DRY_RUN
#   define CORE(FN, ARGS)
#else
#   define CORE(FN, ARGS) CORE_##FN ARGS
#endif
%}

/* Globals
 *  SIZE
 */

SIZE         [int]
MATRIX       [(tiled_matrix_desc_t *)]

/**************************************************
 *                      GEN                       *
 **************************************************/
GEN(i, j) (high_priority)

// Execution space
i = 0..SIZE-1
j = 0..SIZE-1

// Parallel partitioning
: A(i, j)

// Parameters
WRITE    T -> A(i, j)

; 1

BODY
    CORE(
        create_tile_cholesky_double, ( MATRIX, A(i, j), i, j) 
        );

    
    OUTPUT((
        "thread %d VP %d GEN( A(%d,%d)[%p])\n",
            context->th_id, context->virtual_process->vp_id, i, j, T)
        );
END
